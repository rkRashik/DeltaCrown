# Generated by Django 4.2.24 on 2025-10-14 05:59

from django.db import migrations, models


def migrate_captains_to_owners(apps, schema_editor):
    """
    Data migration: Convert all CAPTAIN roles to OWNER roles.
    This is the critical migration that transforms the old captain-led system
    to the new professional hierarchy.
    """
    TeamMembership = apps.get_model('teams', 'TeamMembership')
    
    # Get all captain memberships
    captain_memberships = TeamMembership.objects.filter(role='CAPTAIN')
    count = captain_memberships.count()
    
    print(f"\nðŸ”„ Migrating {count} team captains to team owners...")
    
    for membership in captain_memberships:
        # Update role to OWNER
        membership.role = 'OWNER'
        
        # Set permission cache
        membership.can_manage_roster = True
        membership.can_edit_team = True
        membership.can_register_tournaments = True
        
        # Note: is_captain stays False - this is now a separate title
        # that can be assigned to Players/Substitutes
        
        membership.save()
        print(f"  âœ… {membership.profile.user.username} â†’ Team Owner of '{membership.team.name}'")
    
    print(f"âœ… Successfully migrated {count} captains to owners!\n")


def reverse_owners_to_captains(apps, schema_editor):
    """
    Reverse migration: Convert OWNER roles back to CAPTAIN roles.
    This is the rollback function in case we need to revert.
    """
    TeamMembership = apps.get_model('teams', 'TeamMembership')
    
    # Get all owner memberships
    owner_memberships = TeamMembership.objects.filter(role='OWNER')
    count = owner_memberships.count()
    
    print(f"\nðŸ”„ Rolling back {count} team owners to captains...")
    
    for membership in owner_memberships:
        # Revert role to CAPTAIN
        membership.role = 'CAPTAIN'
        
        # Clear permission cache
        membership.can_manage_roster = False
        membership.can_edit_team = False
        membership.can_register_tournaments = False
        
        membership.save()
        print(f"  âœ… {membership.profile.user.username} â†’ Captain of '{membership.team.name}'")
    
    print(f"âœ… Successfully rolled back {count} owners to captains!\n")


class Migration(migrations.Migration):

    dependencies = [
        ('teams', '0054_add_player_role_dual_system'),
    ]

    operations = [
        # Step 1: Add new fields
        migrations.AddField(
            model_name='teammembership',
            name='can_edit_team',
            field=models.BooleanField(default=False, help_text='Cached permission: Can edit team profile'),
        ),
        migrations.AddField(
            model_name='teammembership',
            name='can_manage_roster',
            field=models.BooleanField(default=False, help_text='Cached permission: Can invite/kick members'),
        ),
        migrations.AddField(
            model_name='teammembership',
            name='can_register_tournaments',
            field=models.BooleanField(default=False, help_text='Cached permission: Can register team for tournaments'),
        ),
        migrations.AddField(
            model_name='teammembership',
            name='is_captain',
            field=models.BooleanField(default=False, help_text='In-game leader badge. Can only be true for PLAYER or SUBSTITUTE roles.', verbose_name='Captain Title'),
        ),
        
        # Step 2: Update role choices to include new roles
        migrations.AlterField(
            model_name='teaminvite',
            name='role',
            field=models.CharField(choices=[('OWNER', 'Team Owner'), ('MANAGER', 'Manager'), ('COACH', 'Coach'), ('PLAYER', 'Player'), ('SUBSTITUTE', 'Substitute'), ('CAPTAIN', 'Captain (Legacy)'), ('SUB', 'Substitute (Legacy)')], default='PLAYER', max_length=16),
        ),
        migrations.AlterField(
            model_name='teammembership',
            name='role',
            field=models.CharField(choices=[('OWNER', 'Team Owner'), ('MANAGER', 'Manager'), ('COACH', 'Coach'), ('PLAYER', 'Player'), ('SUBSTITUTE', 'Substitute'), ('CAPTAIN', 'Captain (Legacy)'), ('SUB', 'Substitute (Legacy)')], default='PLAYER', max_length=16),
        ),
        
        # Step 3: DATA MIGRATION - Convert CAPTAIN to OWNER
        migrations.RunPython(migrate_captains_to_owners, reverse_owners_to_captains),
        
        # Step 4: Add database indexes and constraints
        migrations.AddIndex(
            model_name='teammembership',
            index=models.Index(fields=['team', 'role'], name='teams_role_lookup_idx'),
        ),
        migrations.AddConstraint(
            model_name='teammembership',
            constraint=models.UniqueConstraint(condition=models.Q(('role', 'OWNER'), ('status', 'ACTIVE')), fields=('team',), name='uq_one_active_owner_per_team'),
        ),
        migrations.AddConstraint(
            model_name='teammembership',
            constraint=models.UniqueConstraint(condition=models.Q(('is_captain', True), ('status', 'ACTIVE')), fields=('team',), name='uq_one_captain_title_per_team'),
        ),
    ]
