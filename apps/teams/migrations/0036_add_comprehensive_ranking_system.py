# Generated by Django 4.2.24 on 2025-09-26 06:31

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('teams', '0035_remove_teamrankingpoints_team_and_more'),
    ]

    operations = [
        migrations.RemoveField(
            model_name='teamrankingsettings',
            name='top8_finish_points',
        ),
        migrations.AlterField(
            model_name='teamrankingsettings',
            name='general_achievement_points',
            field=models.PositiveIntegerField(default=100, help_text='Points awarded for other notable achievements', validators=[django.core.validators.MinValueValidator(1)]),
        ),
        migrations.AlterField(
            model_name='teamrankingsettings',
            name='member_points',
            field=models.PositiveIntegerField(default=10, help_text='Points awarded per active team member', validators=[django.core.validators.MinValueValidator(1)]),
        ),
        migrations.AlterField(
            model_name='teamrankingsettings',
            name='monthly_age_points',
            field=models.PositiveIntegerField(default=30, help_text='Points awarded per month since team creation', validators=[django.core.validators.MinValueValidator(1)]),
        ),
        migrations.AlterField(
            model_name='teamrankingsettings',
            name='participation_points',
            field=models.PositiveIntegerField(default=50, help_text='Points awarded for each tournament participation', validators=[django.core.validators.MinValueValidator(1)]),
        ),
        migrations.AlterField(
            model_name='teamrankingsettings',
            name='runner_up_points',
            field=models.PositiveIntegerField(default=300, help_text='Points awarded for each runner-up finish (2nd place)', validators=[django.core.validators.MinValueValidator(1)]),
        ),
        migrations.AlterField(
            model_name='teamrankingsettings',
            name='top4_finish_points',
            field=models.PositiveIntegerField(default=150, help_text='Points awarded for each top 4 tournament finish', validators=[django.core.validators.MinValueValidator(1)]),
        ),
        migrations.AlterField(
            model_name='teamrankingsettings',
            name='tournament_victory_points',
            field=models.PositiveIntegerField(default=500, help_text='Points awarded for each tournament victory (1st place)', validators=[django.core.validators.MinValueValidator(1)]),
        ),
        migrations.CreateModel(
            name='TeamRankingPoints',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('tournament_points', models.PositiveIntegerField(default=0, help_text='Points from tournament results (victories, runner-ups, etc.)')),
                ('participation_points', models.PositiveIntegerField(default=0, help_text='Points from tournament participation')),
                ('member_points', models.PositiveIntegerField(default=0, help_text='Points based on active team members')),
                ('age_points', models.PositiveIntegerField(default=0, help_text='Points based on team age (months since creation)')),
                ('achievement_points', models.PositiveIntegerField(default=0, help_text='Points from other achievements and trophies')),
                ('bonus_points', models.PositiveIntegerField(default=0, help_text='Bonus points (verified team, featured team, etc.)')),
                ('manual_points', models.IntegerField(default=0, help_text='Manual points adjustments by admin (can be negative)')),
                ('total_points', models.PositiveIntegerField(default=0, help_text='Total ranking points (automatically calculated)')),
                ('last_calculated', models.DateTimeField(auto_now=True, help_text='When points were last calculated')),
                ('calculation_version', models.PositiveIntegerField(default=1, help_text='Version of calculation algorithm used')),
                ('is_locked', models.BooleanField(default=False, help_text='If true, automatic calculations are disabled')),
                ('notes', models.TextField(blank=True, help_text="Admin notes about this team's ranking")),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('team', models.OneToOneField(help_text='Team these points belong to', on_delete=django.db.models.deletion.CASCADE, related_name='ranking_points', to='teams.team')),
            ],
            options={
                'verbose_name': 'Team Ranking Points',
                'verbose_name_plural': 'Team Ranking Points',
                'db_table': 'teams_ranking_points',
                'ordering': ['-total_points', 'team__name'],
            },
        ),
        migrations.CreateModel(
            name='TeamRankingLeaderboard',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('game', models.CharField(help_text='Game for this leaderboard (empty for global)', max_length=50)),
                ('region', models.CharField(blank=True, help_text='Region filter (empty for global)', max_length=100)),
                ('snapshot_data', models.JSONField(help_text='Cached leaderboard data')),
                ('total_teams', models.PositiveIntegerField(default=0, help_text='Total teams in this leaderboard')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('expires_at', models.DateTimeField(help_text='When this cache expires')),
            ],
            options={
                'verbose_name': 'Team Ranking Leaderboard',
                'verbose_name_plural': 'Team Ranking Leaderboards',
                'db_table': 'teams_ranking_leaderboards',
                'indexes': [models.Index(fields=['game', 'region', 'expires_at'], name='teams_ranki_game_f5d4d1_idx')],
            },
        ),
        migrations.CreateModel(
            name='TeamRankingAdjustment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('points_changed', models.IntegerField(help_text='Points added (positive) or removed (negative)')),
                ('reason', models.CharField(help_text='Reason for the adjustment', max_length=255)),
                ('notes', models.TextField(blank=True, help_text='Additional details about the adjustment')),
                ('points_before', models.IntegerField(help_text='Total points before adjustment')),
                ('points_after', models.IntegerField(help_text='Total points after adjustment')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('adjusted_by', models.ForeignKey(blank=True, help_text='Admin who made the adjustment', null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('team', models.ForeignKey(help_text='Team that received the adjustment', on_delete=django.db.models.deletion.CASCADE, related_name='ranking_adjustments', to='teams.team')),
            ],
            options={
                'verbose_name': 'Team Ranking Adjustment',
                'verbose_name_plural': 'Team Ranking Adjustments',
                'db_table': 'teams_ranking_adjustments',
                'ordering': ['-created_at'],
            },
        ),
    ]
