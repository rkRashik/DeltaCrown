# Generated by Django 4.2.24 on 2025-09-25 20:33

from decimal import Decimal
from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('tournaments', '0028_delete_tournamentregistrationpolicy'),
        ('teams', '0031_remove_teampointsadjustment_admin_user_and_more'),
    ]

    operations = [
        migrations.CreateModel(
            name='TeamRankingCategory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('category', models.CharField(choices=[('tournament_participation', 'Tournament Participation'), ('tournament_winner', 'Tournament Winner (1st Place)'), ('tournament_runner_up', 'Tournament Runner-up (2nd Place)'), ('tournament_top_4', 'Tournament Top 4 Finish'), ('tournament_top_8', 'Tournament Top 8 Finish'), ('member_bonus', 'Points per Team Member'), ('team_age_monthly', 'Points per Month (Team Age)'), ('general_achievement', 'General Achievement'), ('verified_team_bonus', 'Verified Team Bonus'), ('featured_team_bonus', 'Featured Team Bonus')], help_text='Type of achievement or criteria', max_length=50, unique=True)),
                ('points', models.IntegerField(default=0, help_text='Points awarded for this category (can be negative for penalties)')),
                ('is_multiplier', models.BooleanField(default=False, help_text='If true, this value is used as a multiplier (e.g., 1.1 for 10% bonus)')),
                ('multiplier_value', models.DecimalField(decimal_places=3, default=1.0, help_text='Multiplier value (only used if is_multiplier is True)', max_digits=5, validators=[django.core.validators.MinValueValidator(Decimal('0.001'))])),
                ('is_active', models.BooleanField(default=True, help_text='Whether this category is currently active')),
                ('description', models.TextField(blank=True, help_text='Description of what this category represents')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Ranking Point Category',
                'verbose_name_plural': 'Ranking Point Categories',
                'db_table': 'teams_ranking_category',
                'ordering': ['category'],
            },
        ),
        migrations.CreateModel(
            name='TeamRankingControl',
            fields=[
            ],
            options={
                'verbose_name': 'Team Ranking Control Panel',
                'verbose_name_plural': 'Team Ranking Control Panel',
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('teams.team',),
        ),
        migrations.CreateModel(
            name='TeamRankingPoints',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('source', models.CharField(choices=[('tournament_result', 'Tournament Result'), ('team_membership', 'Team Membership'), ('team_age', 'Team Age'), ('achievement', 'General Achievement'), ('admin_adjustment', 'Admin Manual Adjustment'), ('bonus', 'Bonus Points'), ('penalty', 'Penalty Points')], help_text='Source of these points', max_length=30)),
                ('category', models.CharField(blank=True, choices=[('tournament_participation', 'Tournament Participation'), ('tournament_winner', 'Tournament Winner (1st Place)'), ('tournament_runner_up', 'Tournament Runner-up (2nd Place)'), ('tournament_top_4', 'Tournament Top 4 Finish'), ('tournament_top_8', 'Tournament Top 8 Finish'), ('member_bonus', 'Points per Team Member'), ('team_age_monthly', 'Points per Month (Team Age)'), ('general_achievement', 'General Achievement'), ('verified_team_bonus', 'Verified Team Bonus'), ('featured_team_bonus', 'Featured Team Bonus')], help_text='Specific category within the source', max_length=50)),
                ('points', models.IntegerField(help_text='Points awarded (positive) or deducted (negative)')),
                ('description', models.CharField(help_text='Description of why these points were awarded/deducted', max_length=255)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('awarded_by', models.ForeignKey(blank=True, help_text='Admin who manually awarded these points (if manual)', null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('source_achievement', models.ForeignKey(blank=True, help_text='Achievement that generated these points', null=True, on_delete=django.db.models.deletion.CASCADE, to='teams.teamachievement')),
                ('source_tournament', models.ForeignKey(blank=True, help_text='Tournament that generated these points', null=True, on_delete=django.db.models.deletion.CASCADE, to='tournaments.tournament')),
                ('team', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='ranking_points', to='teams.team')),
            ],
            options={
                'verbose_name': 'Team Ranking Point Entry',
                'verbose_name_plural': 'Team Ranking Point Entries',
                'db_table': 'teams_ranking_points',
                'ordering': ['-created_at'],
                'indexes': [models.Index(fields=['team', '-created_at'], name='teams_ranki_team_id_a31776_idx'), models.Index(fields=['source', 'category'], name='teams_ranki_source_1dabbc_idx')],
            },
        ),
    ]
