# Generated by Django 4.2.24 on 2025-10-09 11:10

from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    dependencies = [
        ('user_profile', '0007_fix_user_fk_constraint'),
        ('teams', '0039_fix_teams_ranking_constraint'),
    ]

    operations = [
        migrations.CreateModel(
            name='ValorantTeam',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Team name', max_length=100)),
                ('tag', models.CharField(help_text='Team tag/abbreviation (2-10 characters)', max_length=10)),
                ('slug', models.SlugField(blank=True, help_text='URL-friendly identifier (auto-generated)', max_length=64)),
                ('description', models.TextField(blank=True, help_text='Brief team description', max_length=500)),
                ('logo', models.ImageField(blank=True, help_text='Team logo image', null=True, upload_to='teams/logos/')),
                ('banner_image', models.ImageField(blank=True, help_text='Team banner image', null=True, upload_to='teams/banners/')),
                ('region', models.CharField(blank=True, help_text='Geographic region (e.g., NA, EU, SEA)', max_length=100)),
                ('country', models.CharField(blank=True, help_text='Country', max_length=100)),
                ('twitter', models.URLField(blank=True, help_text='Twitter profile URL')),
                ('instagram', models.URLField(blank=True, help_text='Instagram profile URL')),
                ('discord', models.URLField(blank=True, help_text='Discord server URL')),
                ('youtube', models.URLField(blank=True, help_text='YouTube channel URL')),
                ('twitch', models.URLField(blank=True, help_text='Twitch channel URL')),
                ('website', models.URLField(blank=True, help_text='Official website URL')),
                ('is_active', models.BooleanField(default=True, help_text='Team is active and visible')),
                ('is_public', models.BooleanField(default=True, help_text='Team profile is publicly visible')),
                ('is_verified', models.BooleanField(default=False, help_text='Officially verified team')),
                ('is_recruiting', models.BooleanField(default=True, help_text='Team is actively recruiting')),
                ('allow_join_requests', models.BooleanField(default=True, help_text='Allow users to request to join')),
                ('require_approval', models.BooleanField(default=True, help_text='Captain must approve new members')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('game', models.CharField(default='valorant', editable=False, max_length=20)),
                ('average_rank', models.CharField(blank=True, help_text='Team average competitive rank', max_length=50)),
                ('captain', models.ForeignKey(blank=True, help_text='Team captain (must be a team member)', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_captain_teams', to='user_profile.userprofile')),
            ],
            options={
                'verbose_name': 'Valorant Team',
                'verbose_name_plural': 'Valorant Teams',
                'db_table': 'teams_valorant_team',
            },
        ),
        migrations.CreateModel(
            name='ValorantPlayerMembership',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('role', models.CharField(help_text='Player role (e.g., Duelist, IGL, Carry)', max_length=50)),
                ('secondary_role', models.CharField(blank=True, help_text='Secondary/backup role', max_length=50)),
                ('status', models.CharField(choices=[('ACTIVE', 'Active'), ('SUBSTITUTE', 'Substitute'), ('INACTIVE', 'Inactive'), ('PENDING', 'Pending'), ('REMOVED', 'Removed')], default='PENDING', help_text='Membership status', max_length=20)),
                ('is_captain', models.BooleanField(default=False, help_text='Is team captain')),
                ('is_starter', models.BooleanField(default=True, help_text='Starting lineup member')),
                ('in_game_name', models.CharField(blank=True, help_text='In-game name (IGN)', max_length=50)),
                ('jersey_number', models.PositiveIntegerField(blank=True, help_text='Jersey/player number', null=True)),
                ('games_played', models.PositiveIntegerField(default=0, help_text='Games played with team')),
                ('joined_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('left_at', models.DateTimeField(blank=True, null=True)),
                ('game_specific_data', models.JSONField(blank=True, default=dict, help_text='Additional game-specific player data')),
                ('agent_pool', models.JSONField(blank=True, default=list, help_text='List of agents this player uses')),
                ('competitive_rank', models.CharField(blank=True, help_text="Player's competitive rank", max_length=50)),
                ('profile', models.ForeignKey(help_text='Player profile', on_delete=django.db.models.deletion.CASCADE, related_name='%(class)s_memberships', to='user_profile.userprofile')),
                ('team', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='valorant_memberships', to='teams.valorantteam')),
            ],
            options={
                'verbose_name': 'Valorant Player',
                'verbose_name_plural': 'Valorant Players',
                'db_table': 'teams_valorant_membership',
            },
        ),
        migrations.CreateModel(
            name='PUBGTeam',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Team name', max_length=100)),
                ('tag', models.CharField(help_text='Team tag/abbreviation (2-10 characters)', max_length=10)),
                ('slug', models.SlugField(blank=True, help_text='URL-friendly identifier (auto-generated)', max_length=64)),
                ('description', models.TextField(blank=True, help_text='Brief team description', max_length=500)),
                ('logo', models.ImageField(blank=True, help_text='Team logo image', null=True, upload_to='teams/logos/')),
                ('banner_image', models.ImageField(blank=True, help_text='Team banner image', null=True, upload_to='teams/banners/')),
                ('region', models.CharField(blank=True, help_text='Geographic region (e.g., NA, EU, SEA)', max_length=100)),
                ('country', models.CharField(blank=True, help_text='Country', max_length=100)),
                ('twitter', models.URLField(blank=True, help_text='Twitter profile URL')),
                ('instagram', models.URLField(blank=True, help_text='Instagram profile URL')),
                ('discord', models.URLField(blank=True, help_text='Discord server URL')),
                ('youtube', models.URLField(blank=True, help_text='YouTube channel URL')),
                ('twitch', models.URLField(blank=True, help_text='Twitch channel URL')),
                ('website', models.URLField(blank=True, help_text='Official website URL')),
                ('is_active', models.BooleanField(default=True, help_text='Team is active and visible')),
                ('is_public', models.BooleanField(default=True, help_text='Team profile is publicly visible')),
                ('is_verified', models.BooleanField(default=False, help_text='Officially verified team')),
                ('is_recruiting', models.BooleanField(default=True, help_text='Team is actively recruiting')),
                ('allow_join_requests', models.BooleanField(default=True, help_text='Allow users to request to join')),
                ('require_approval', models.BooleanField(default=True, help_text='Captain must approve new members')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('game', models.CharField(default='pubg', editable=False, max_length=20)),
                ('captain', models.ForeignKey(blank=True, help_text='Team captain (must be a team member)', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_captain_teams', to='user_profile.userprofile')),
            ],
            options={
                'verbose_name': 'PUBG Team',
                'verbose_name_plural': 'PUBG Teams',
                'db_table': 'teams_pubg_team',
            },
        ),
        migrations.CreateModel(
            name='PUBGPlayerMembership',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('role', models.CharField(help_text='Player role (e.g., Duelist, IGL, Carry)', max_length=50)),
                ('secondary_role', models.CharField(blank=True, help_text='Secondary/backup role', max_length=50)),
                ('status', models.CharField(choices=[('ACTIVE', 'Active'), ('SUBSTITUTE', 'Substitute'), ('INACTIVE', 'Inactive'), ('PENDING', 'Pending'), ('REMOVED', 'Removed')], default='PENDING', help_text='Membership status', max_length=20)),
                ('is_captain', models.BooleanField(default=False, help_text='Is team captain')),
                ('is_starter', models.BooleanField(default=True, help_text='Starting lineup member')),
                ('in_game_name', models.CharField(blank=True, help_text='In-game name (IGN)', max_length=50)),
                ('jersey_number', models.PositiveIntegerField(blank=True, help_text='Jersey/player number', null=True)),
                ('games_played', models.PositiveIntegerField(default=0, help_text='Games played with team')),
                ('joined_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('left_at', models.DateTimeField(blank=True, null=True)),
                ('game_specific_data', models.JSONField(blank=True, default=dict, help_text='Additional game-specific player data')),
                ('tier', models.CharField(blank=True, help_text='Player tier/rank', max_length=50)),
                ('profile', models.ForeignKey(help_text='Player profile', on_delete=django.db.models.deletion.CASCADE, related_name='%(class)s_memberships', to='user_profile.userprofile')),
                ('team', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='pubg_memberships', to='teams.pubgteam')),
            ],
            options={
                'db_table': 'teams_pubg_membership',
            },
        ),
        migrations.CreateModel(
            name='MLBBTeam',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Team name', max_length=100)),
                ('tag', models.CharField(help_text='Team tag/abbreviation (2-10 characters)', max_length=10)),
                ('slug', models.SlugField(blank=True, help_text='URL-friendly identifier (auto-generated)', max_length=64)),
                ('description', models.TextField(blank=True, help_text='Brief team description', max_length=500)),
                ('logo', models.ImageField(blank=True, help_text='Team logo image', null=True, upload_to='teams/logos/')),
                ('banner_image', models.ImageField(blank=True, help_text='Team banner image', null=True, upload_to='teams/banners/')),
                ('region', models.CharField(blank=True, help_text='Geographic region (e.g., NA, EU, SEA)', max_length=100)),
                ('country', models.CharField(blank=True, help_text='Country', max_length=100)),
                ('twitter', models.URLField(blank=True, help_text='Twitter profile URL')),
                ('instagram', models.URLField(blank=True, help_text='Instagram profile URL')),
                ('discord', models.URLField(blank=True, help_text='Discord server URL')),
                ('youtube', models.URLField(blank=True, help_text='YouTube channel URL')),
                ('twitch', models.URLField(blank=True, help_text='Twitch channel URL')),
                ('website', models.URLField(blank=True, help_text='Official website URL')),
                ('is_active', models.BooleanField(default=True, help_text='Team is active and visible')),
                ('is_public', models.BooleanField(default=True, help_text='Team profile is publicly visible')),
                ('is_verified', models.BooleanField(default=False, help_text='Officially verified team')),
                ('is_recruiting', models.BooleanField(default=True, help_text='Team is actively recruiting')),
                ('allow_join_requests', models.BooleanField(default=True, help_text='Allow users to request to join')),
                ('require_approval', models.BooleanField(default=True, help_text='Captain must approve new members')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('game', models.CharField(default='mlbb', editable=False, max_length=20)),
                ('captain', models.ForeignKey(blank=True, help_text='Team captain (must be a team member)', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_captain_teams', to='user_profile.userprofile')),
            ],
            options={
                'verbose_name': 'MLBB Team',
                'verbose_name_plural': 'MLBB Teams',
                'db_table': 'teams_mlbb_team',
            },
        ),
        migrations.CreateModel(
            name='MLBBPlayerMembership',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('role', models.CharField(help_text='Player role (e.g., Duelist, IGL, Carry)', max_length=50)),
                ('secondary_role', models.CharField(blank=True, help_text='Secondary/backup role', max_length=50)),
                ('status', models.CharField(choices=[('ACTIVE', 'Active'), ('SUBSTITUTE', 'Substitute'), ('INACTIVE', 'Inactive'), ('PENDING', 'Pending'), ('REMOVED', 'Removed')], default='PENDING', help_text='Membership status', max_length=20)),
                ('is_captain', models.BooleanField(default=False, help_text='Is team captain')),
                ('is_starter', models.BooleanField(default=True, help_text='Starting lineup member')),
                ('in_game_name', models.CharField(blank=True, help_text='In-game name (IGN)', max_length=50)),
                ('jersey_number', models.PositiveIntegerField(blank=True, help_text='Jersey/player number', null=True)),
                ('games_played', models.PositiveIntegerField(default=0, help_text='Games played with team')),
                ('joined_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('left_at', models.DateTimeField(blank=True, null=True)),
                ('game_specific_data', models.JSONField(blank=True, default=dict, help_text='Additional game-specific player data')),
                ('server', models.CharField(blank=True, help_text='Game server (e.g., Asia, NA)', max_length=50)),
                ('profile', models.ForeignKey(help_text='Player profile', on_delete=django.db.models.deletion.CASCADE, related_name='%(class)s_memberships', to='user_profile.userprofile')),
                ('team', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='mlbb_memberships', to='teams.mlbbteam')),
            ],
            options={
                'db_table': 'teams_mlbb_membership',
            },
        ),
        migrations.CreateModel(
            name='FreeFireTeam',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Team name', max_length=100)),
                ('tag', models.CharField(help_text='Team tag/abbreviation (2-10 characters)', max_length=10)),
                ('slug', models.SlugField(blank=True, help_text='URL-friendly identifier (auto-generated)', max_length=64)),
                ('description', models.TextField(blank=True, help_text='Brief team description', max_length=500)),
                ('logo', models.ImageField(blank=True, help_text='Team logo image', null=True, upload_to='teams/logos/')),
                ('banner_image', models.ImageField(blank=True, help_text='Team banner image', null=True, upload_to='teams/banners/')),
                ('region', models.CharField(blank=True, help_text='Geographic region (e.g., NA, EU, SEA)', max_length=100)),
                ('country', models.CharField(blank=True, help_text='Country', max_length=100)),
                ('twitter', models.URLField(blank=True, help_text='Twitter profile URL')),
                ('instagram', models.URLField(blank=True, help_text='Instagram profile URL')),
                ('discord', models.URLField(blank=True, help_text='Discord server URL')),
                ('youtube', models.URLField(blank=True, help_text='YouTube channel URL')),
                ('twitch', models.URLField(blank=True, help_text='Twitch channel URL')),
                ('website', models.URLField(blank=True, help_text='Official website URL')),
                ('is_active', models.BooleanField(default=True, help_text='Team is active and visible')),
                ('is_public', models.BooleanField(default=True, help_text='Team profile is publicly visible')),
                ('is_verified', models.BooleanField(default=False, help_text='Officially verified team')),
                ('is_recruiting', models.BooleanField(default=True, help_text='Team is actively recruiting')),
                ('allow_join_requests', models.BooleanField(default=True, help_text='Allow users to request to join')),
                ('require_approval', models.BooleanField(default=True, help_text='Captain must approve new members')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('game', models.CharField(default='freefire', editable=False, max_length=20)),
                ('captain', models.ForeignKey(blank=True, help_text='Team captain (must be a team member)', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_captain_teams', to='user_profile.userprofile')),
            ],
            options={
                'verbose_name': 'Free Fire Team',
                'verbose_name_plural': 'Free Fire Teams',
                'db_table': 'teams_freefire_team',
            },
        ),
        migrations.CreateModel(
            name='FreeFirePlayerMembership',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('role', models.CharField(help_text='Player role (e.g., Duelist, IGL, Carry)', max_length=50)),
                ('secondary_role', models.CharField(blank=True, help_text='Secondary/backup role', max_length=50)),
                ('status', models.CharField(choices=[('ACTIVE', 'Active'), ('SUBSTITUTE', 'Substitute'), ('INACTIVE', 'Inactive'), ('PENDING', 'Pending'), ('REMOVED', 'Removed')], default='PENDING', help_text='Membership status', max_length=20)),
                ('is_captain', models.BooleanField(default=False, help_text='Is team captain')),
                ('is_starter', models.BooleanField(default=True, help_text='Starting lineup member')),
                ('in_game_name', models.CharField(blank=True, help_text='In-game name (IGN)', max_length=50)),
                ('jersey_number', models.PositiveIntegerField(blank=True, help_text='Jersey/player number', null=True)),
                ('games_played', models.PositiveIntegerField(default=0, help_text='Games played with team')),
                ('joined_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('left_at', models.DateTimeField(blank=True, null=True)),
                ('game_specific_data', models.JSONField(blank=True, default=dict, help_text='Additional game-specific player data')),
                ('profile', models.ForeignKey(help_text='Player profile', on_delete=django.db.models.deletion.CASCADE, related_name='%(class)s_memberships', to='user_profile.userprofile')),
                ('team', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='freefire_memberships', to='teams.freefireteam')),
            ],
            options={
                'db_table': 'teams_freefire_membership',
            },
        ),
        migrations.CreateModel(
            name='FC26Team',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Team name', max_length=100)),
                ('tag', models.CharField(help_text='Team tag/abbreviation (2-10 characters)', max_length=10)),
                ('slug', models.SlugField(blank=True, help_text='URL-friendly identifier (auto-generated)', max_length=64)),
                ('description', models.TextField(blank=True, help_text='Brief team description', max_length=500)),
                ('logo', models.ImageField(blank=True, help_text='Team logo image', null=True, upload_to='teams/logos/')),
                ('banner_image', models.ImageField(blank=True, help_text='Team banner image', null=True, upload_to='teams/banners/')),
                ('region', models.CharField(blank=True, help_text='Geographic region (e.g., NA, EU, SEA)', max_length=100)),
                ('country', models.CharField(blank=True, help_text='Country', max_length=100)),
                ('twitter', models.URLField(blank=True, help_text='Twitter profile URL')),
                ('instagram', models.URLField(blank=True, help_text='Instagram profile URL')),
                ('discord', models.URLField(blank=True, help_text='Discord server URL')),
                ('youtube', models.URLField(blank=True, help_text='YouTube channel URL')),
                ('twitch', models.URLField(blank=True, help_text='Twitch channel URL')),
                ('website', models.URLField(blank=True, help_text='Official website URL')),
                ('is_active', models.BooleanField(default=True, help_text='Team is active and visible')),
                ('is_public', models.BooleanField(default=True, help_text='Team profile is publicly visible')),
                ('is_verified', models.BooleanField(default=False, help_text='Officially verified team')),
                ('is_recruiting', models.BooleanField(default=True, help_text='Team is actively recruiting')),
                ('allow_join_requests', models.BooleanField(default=True, help_text='Allow users to request to join')),
                ('require_approval', models.BooleanField(default=True, help_text='Captain must approve new members')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('game', models.CharField(default='fc26', editable=False, max_length=20)),
                ('captain', models.ForeignKey(blank=True, help_text='Team captain (must be a team member)', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_captain_teams', to='user_profile.userprofile')),
            ],
            options={
                'verbose_name': 'FC 26 Team',
                'verbose_name_plural': 'FC 26 Teams',
                'db_table': 'teams_fc26_team',
            },
        ),
        migrations.CreateModel(
            name='FC26PlayerMembership',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('role', models.CharField(help_text='Player role (e.g., Duelist, IGL, Carry)', max_length=50)),
                ('secondary_role', models.CharField(blank=True, help_text='Secondary/backup role', max_length=50)),
                ('status', models.CharField(choices=[('ACTIVE', 'Active'), ('SUBSTITUTE', 'Substitute'), ('INACTIVE', 'Inactive'), ('PENDING', 'Pending'), ('REMOVED', 'Removed')], default='PENDING', help_text='Membership status', max_length=20)),
                ('is_captain', models.BooleanField(default=False, help_text='Is team captain')),
                ('is_starter', models.BooleanField(default=True, help_text='Starting lineup member')),
                ('in_game_name', models.CharField(blank=True, help_text='In-game name (IGN)', max_length=50)),
                ('jersey_number', models.PositiveIntegerField(blank=True, help_text='Jersey/player number', null=True)),
                ('games_played', models.PositiveIntegerField(default=0, help_text='Games played with team')),
                ('joined_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('left_at', models.DateTimeField(blank=True, null=True)),
                ('game_specific_data', models.JSONField(blank=True, default=dict, help_text='Additional game-specific player data')),
                ('platform', models.CharField(blank=True, help_text='Gaming platform', max_length=50)),
                ('profile', models.ForeignKey(help_text='Player profile', on_delete=django.db.models.deletion.CASCADE, related_name='%(class)s_memberships', to='user_profile.userprofile')),
                ('team', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='fc26_memberships', to='teams.fc26team')),
            ],
            options={
                'db_table': 'teams_fc26_membership',
            },
        ),
        migrations.CreateModel(
            name='EFootballTeam',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Team name', max_length=100)),
                ('tag', models.CharField(help_text='Team tag/abbreviation (2-10 characters)', max_length=10)),
                ('slug', models.SlugField(blank=True, help_text='URL-friendly identifier (auto-generated)', max_length=64)),
                ('description', models.TextField(blank=True, help_text='Brief team description', max_length=500)),
                ('logo', models.ImageField(blank=True, help_text='Team logo image', null=True, upload_to='teams/logos/')),
                ('banner_image', models.ImageField(blank=True, help_text='Team banner image', null=True, upload_to='teams/banners/')),
                ('region', models.CharField(blank=True, help_text='Geographic region (e.g., NA, EU, SEA)', max_length=100)),
                ('country', models.CharField(blank=True, help_text='Country', max_length=100)),
                ('twitter', models.URLField(blank=True, help_text='Twitter profile URL')),
                ('instagram', models.URLField(blank=True, help_text='Instagram profile URL')),
                ('discord', models.URLField(blank=True, help_text='Discord server URL')),
                ('youtube', models.URLField(blank=True, help_text='YouTube channel URL')),
                ('twitch', models.URLField(blank=True, help_text='Twitch channel URL')),
                ('website', models.URLField(blank=True, help_text='Official website URL')),
                ('is_active', models.BooleanField(default=True, help_text='Team is active and visible')),
                ('is_public', models.BooleanField(default=True, help_text='Team profile is publicly visible')),
                ('is_verified', models.BooleanField(default=False, help_text='Officially verified team')),
                ('is_recruiting', models.BooleanField(default=True, help_text='Team is actively recruiting')),
                ('allow_join_requests', models.BooleanField(default=True, help_text='Allow users to request to join')),
                ('require_approval', models.BooleanField(default=True, help_text='Captain must approve new members')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('game', models.CharField(default='efootball', editable=False, max_length=20)),
                ('captain', models.ForeignKey(blank=True, help_text='Team captain (must be a team member)', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_captain_teams', to='user_profile.userprofile')),
            ],
            options={
                'verbose_name': 'eFootball Team',
                'verbose_name_plural': 'eFootball Teams',
                'db_table': 'teams_efootball_team',
            },
        ),
        migrations.CreateModel(
            name='EFootballPlayerMembership',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('role', models.CharField(help_text='Player role (e.g., Duelist, IGL, Carry)', max_length=50)),
                ('secondary_role', models.CharField(blank=True, help_text='Secondary/backup role', max_length=50)),
                ('status', models.CharField(choices=[('ACTIVE', 'Active'), ('SUBSTITUTE', 'Substitute'), ('INACTIVE', 'Inactive'), ('PENDING', 'Pending'), ('REMOVED', 'Removed')], default='PENDING', help_text='Membership status', max_length=20)),
                ('is_captain', models.BooleanField(default=False, help_text='Is team captain')),
                ('is_starter', models.BooleanField(default=True, help_text='Starting lineup member')),
                ('in_game_name', models.CharField(blank=True, help_text='In-game name (IGN)', max_length=50)),
                ('jersey_number', models.PositiveIntegerField(blank=True, help_text='Jersey/player number', null=True)),
                ('games_played', models.PositiveIntegerField(default=0, help_text='Games played with team')),
                ('joined_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('left_at', models.DateTimeField(blank=True, null=True)),
                ('game_specific_data', models.JSONField(blank=True, default=dict, help_text='Additional game-specific player data')),
                ('platform', models.CharField(blank=True, help_text='Gaming platform (PC, PS5, Xbox, Mobile)', max_length=50)),
                ('profile', models.ForeignKey(help_text='Player profile', on_delete=django.db.models.deletion.CASCADE, related_name='%(class)s_memberships', to='user_profile.userprofile')),
                ('team', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='efootball_memberships', to='teams.efootballteam')),
            ],
            options={
                'db_table': 'teams_efootball_membership',
            },
        ),
        migrations.CreateModel(
            name='Dota2Team',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Team name', max_length=100)),
                ('tag', models.CharField(help_text='Team tag/abbreviation (2-10 characters)', max_length=10)),
                ('slug', models.SlugField(blank=True, help_text='URL-friendly identifier (auto-generated)', max_length=64)),
                ('description', models.TextField(blank=True, help_text='Brief team description', max_length=500)),
                ('logo', models.ImageField(blank=True, help_text='Team logo image', null=True, upload_to='teams/logos/')),
                ('banner_image', models.ImageField(blank=True, help_text='Team banner image', null=True, upload_to='teams/banners/')),
                ('region', models.CharField(blank=True, help_text='Geographic region (e.g., NA, EU, SEA)', max_length=100)),
                ('country', models.CharField(blank=True, help_text='Country', max_length=100)),
                ('twitter', models.URLField(blank=True, help_text='Twitter profile URL')),
                ('instagram', models.URLField(blank=True, help_text='Instagram profile URL')),
                ('discord', models.URLField(blank=True, help_text='Discord server URL')),
                ('youtube', models.URLField(blank=True, help_text='YouTube channel URL')),
                ('twitch', models.URLField(blank=True, help_text='Twitch channel URL')),
                ('website', models.URLField(blank=True, help_text='Official website URL')),
                ('is_active', models.BooleanField(default=True, help_text='Team is active and visible')),
                ('is_public', models.BooleanField(default=True, help_text='Team profile is publicly visible')),
                ('is_verified', models.BooleanField(default=False, help_text='Officially verified team')),
                ('is_recruiting', models.BooleanField(default=True, help_text='Team is actively recruiting')),
                ('allow_join_requests', models.BooleanField(default=True, help_text='Allow users to request to join')),
                ('require_approval', models.BooleanField(default=True, help_text='Captain must approve new members')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('game', models.CharField(default='dota2', editable=False, max_length=20)),
                ('captain', models.ForeignKey(blank=True, help_text='Team captain (must be a team member)', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_captain_teams', to='user_profile.userprofile')),
            ],
            options={
                'verbose_name': 'Dota 2 Team',
                'verbose_name_plural': 'Dota 2 Teams',
                'db_table': 'teams_dota2_team',
            },
        ),
        migrations.CreateModel(
            name='Dota2PlayerMembership',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('role', models.CharField(help_text='Player role (e.g., Duelist, IGL, Carry)', max_length=50)),
                ('secondary_role', models.CharField(blank=True, help_text='Secondary/backup role', max_length=50)),
                ('status', models.CharField(choices=[('ACTIVE', 'Active'), ('SUBSTITUTE', 'Substitute'), ('INACTIVE', 'Inactive'), ('PENDING', 'Pending'), ('REMOVED', 'Removed')], default='PENDING', help_text='Membership status', max_length=20)),
                ('is_captain', models.BooleanField(default=False, help_text='Is team captain')),
                ('is_starter', models.BooleanField(default=True, help_text='Starting lineup member')),
                ('in_game_name', models.CharField(blank=True, help_text='In-game name (IGN)', max_length=50)),
                ('jersey_number', models.PositiveIntegerField(blank=True, help_text='Jersey/player number', null=True)),
                ('games_played', models.PositiveIntegerField(default=0, help_text='Games played with team')),
                ('joined_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('left_at', models.DateTimeField(blank=True, null=True)),
                ('game_specific_data', models.JSONField(blank=True, default=dict, help_text='Additional game-specific player data')),
                ('mmr', models.PositiveIntegerField(blank=True, help_text='Matchmaking rating', null=True)),
                ('profile', models.ForeignKey(help_text='Player profile', on_delete=django.db.models.deletion.CASCADE, related_name='%(class)s_memberships', to='user_profile.userprofile')),
                ('team', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='dota2_memberships', to='teams.dota2team')),
            ],
            options={
                'db_table': 'teams_dota2_membership',
            },
        ),
        migrations.CreateModel(
            name='CS2Team',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Team name', max_length=100)),
                ('tag', models.CharField(help_text='Team tag/abbreviation (2-10 characters)', max_length=10)),
                ('slug', models.SlugField(blank=True, help_text='URL-friendly identifier (auto-generated)', max_length=64)),
                ('description', models.TextField(blank=True, help_text='Brief team description', max_length=500)),
                ('logo', models.ImageField(blank=True, help_text='Team logo image', null=True, upload_to='teams/logos/')),
                ('banner_image', models.ImageField(blank=True, help_text='Team banner image', null=True, upload_to='teams/banners/')),
                ('region', models.CharField(blank=True, help_text='Geographic region (e.g., NA, EU, SEA)', max_length=100)),
                ('country', models.CharField(blank=True, help_text='Country', max_length=100)),
                ('twitter', models.URLField(blank=True, help_text='Twitter profile URL')),
                ('instagram', models.URLField(blank=True, help_text='Instagram profile URL')),
                ('discord', models.URLField(blank=True, help_text='Discord server URL')),
                ('youtube', models.URLField(blank=True, help_text='YouTube channel URL')),
                ('twitch', models.URLField(blank=True, help_text='Twitch channel URL')),
                ('website', models.URLField(blank=True, help_text='Official website URL')),
                ('is_active', models.BooleanField(default=True, help_text='Team is active and visible')),
                ('is_public', models.BooleanField(default=True, help_text='Team profile is publicly visible')),
                ('is_verified', models.BooleanField(default=False, help_text='Officially verified team')),
                ('is_recruiting', models.BooleanField(default=True, help_text='Team is actively recruiting')),
                ('allow_join_requests', models.BooleanField(default=True, help_text='Allow users to request to join')),
                ('require_approval', models.BooleanField(default=True, help_text='Captain must approve new members')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('game', models.CharField(default='cs2', editable=False, max_length=20)),
                ('captain', models.ForeignKey(blank=True, help_text='Team captain (must be a team member)', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_captain_teams', to='user_profile.userprofile')),
            ],
            options={
                'verbose_name': 'CS2 Team',
                'verbose_name_plural': 'CS2 Teams',
                'db_table': 'teams_cs2_team',
            },
        ),
        migrations.CreateModel(
            name='CS2PlayerMembership',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('role', models.CharField(help_text='Player role (e.g., Duelist, IGL, Carry)', max_length=50)),
                ('secondary_role', models.CharField(blank=True, help_text='Secondary/backup role', max_length=50)),
                ('status', models.CharField(choices=[('ACTIVE', 'Active'), ('SUBSTITUTE', 'Substitute'), ('INACTIVE', 'Inactive'), ('PENDING', 'Pending'), ('REMOVED', 'Removed')], default='PENDING', help_text='Membership status', max_length=20)),
                ('is_captain', models.BooleanField(default=False, help_text='Is team captain')),
                ('is_starter', models.BooleanField(default=True, help_text='Starting lineup member')),
                ('in_game_name', models.CharField(blank=True, help_text='In-game name (IGN)', max_length=50)),
                ('jersey_number', models.PositiveIntegerField(blank=True, help_text='Jersey/player number', null=True)),
                ('games_played', models.PositiveIntegerField(default=0, help_text='Games played with team')),
                ('joined_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('left_at', models.DateTimeField(blank=True, null=True)),
                ('game_specific_data', models.JSONField(blank=True, default=dict, help_text='Additional game-specific player data')),
                ('faceit_elo', models.PositiveIntegerField(blank=True, help_text='FaceIT ELO rating', null=True)),
                ('profile', models.ForeignKey(help_text='Player profile', on_delete=django.db.models.deletion.CASCADE, related_name='%(class)s_memberships', to='user_profile.userprofile')),
                ('team', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='cs2_memberships', to='teams.cs2team')),
            ],
            options={
                'db_table': 'teams_cs2_membership',
            },
        ),
        migrations.CreateModel(
            name='CODMTeam',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Team name', max_length=100)),
                ('tag', models.CharField(help_text='Team tag/abbreviation (2-10 characters)', max_length=10)),
                ('slug', models.SlugField(blank=True, help_text='URL-friendly identifier (auto-generated)', max_length=64)),
                ('description', models.TextField(blank=True, help_text='Brief team description', max_length=500)),
                ('logo', models.ImageField(blank=True, help_text='Team logo image', null=True, upload_to='teams/logos/')),
                ('banner_image', models.ImageField(blank=True, help_text='Team banner image', null=True, upload_to='teams/banners/')),
                ('region', models.CharField(blank=True, help_text='Geographic region (e.g., NA, EU, SEA)', max_length=100)),
                ('country', models.CharField(blank=True, help_text='Country', max_length=100)),
                ('twitter', models.URLField(blank=True, help_text='Twitter profile URL')),
                ('instagram', models.URLField(blank=True, help_text='Instagram profile URL')),
                ('discord', models.URLField(blank=True, help_text='Discord server URL')),
                ('youtube', models.URLField(blank=True, help_text='YouTube channel URL')),
                ('twitch', models.URLField(blank=True, help_text='Twitch channel URL')),
                ('website', models.URLField(blank=True, help_text='Official website URL')),
                ('is_active', models.BooleanField(default=True, help_text='Team is active and visible')),
                ('is_public', models.BooleanField(default=True, help_text='Team profile is publicly visible')),
                ('is_verified', models.BooleanField(default=False, help_text='Officially verified team')),
                ('is_recruiting', models.BooleanField(default=True, help_text='Team is actively recruiting')),
                ('allow_join_requests', models.BooleanField(default=True, help_text='Allow users to request to join')),
                ('require_approval', models.BooleanField(default=True, help_text='Captain must approve new members')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('game', models.CharField(default='codm', editable=False, max_length=20)),
                ('captain', models.ForeignKey(blank=True, help_text='Team captain (must be a team member)', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_captain_teams', to='user_profile.userprofile')),
            ],
            options={
                'verbose_name': 'COD Mobile Team',
                'verbose_name_plural': 'COD Mobile Teams',
                'db_table': 'teams_codm_team',
            },
        ),
        migrations.CreateModel(
            name='CODMPlayerMembership',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('role', models.CharField(help_text='Player role (e.g., Duelist, IGL, Carry)', max_length=50)),
                ('secondary_role', models.CharField(blank=True, help_text='Secondary/backup role', max_length=50)),
                ('status', models.CharField(choices=[('ACTIVE', 'Active'), ('SUBSTITUTE', 'Substitute'), ('INACTIVE', 'Inactive'), ('PENDING', 'Pending'), ('REMOVED', 'Removed')], default='PENDING', help_text='Membership status', max_length=20)),
                ('is_captain', models.BooleanField(default=False, help_text='Is team captain')),
                ('is_starter', models.BooleanField(default=True, help_text='Starting lineup member')),
                ('in_game_name', models.CharField(blank=True, help_text='In-game name (IGN)', max_length=50)),
                ('jersey_number', models.PositiveIntegerField(blank=True, help_text='Jersey/player number', null=True)),
                ('games_played', models.PositiveIntegerField(default=0, help_text='Games played with team')),
                ('joined_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('left_at', models.DateTimeField(blank=True, null=True)),
                ('game_specific_data', models.JSONField(blank=True, default=dict, help_text='Additional game-specific player data')),
                ('rank', models.CharField(blank=True, help_text='Ranked mode tier', max_length=50)),
                ('profile', models.ForeignKey(help_text='Player profile', on_delete=django.db.models.deletion.CASCADE, related_name='%(class)s_memberships', to='user_profile.userprofile')),
                ('team', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='codm_memberships', to='teams.codmteam')),
            ],
            options={
                'db_table': 'teams_codm_membership',
            },
        ),
        migrations.AddConstraint(
            model_name='valorantteam',
            constraint=models.UniqueConstraint(fields=('game', 'slug'), name='unique_valorant_team_slug'),
        ),
        migrations.AddConstraint(
            model_name='valorantteam',
            constraint=models.UniqueConstraint(fields=('game', 'name'), name='unique_valorant_team_name'),
        ),
        migrations.AddConstraint(
            model_name='valorantplayermembership',
            constraint=models.UniqueConstraint(condition=models.Q(('is_captain', True), ('status', 'ACTIVE')), fields=('team',), name='one_captain_per_valorant_team'),
        ),
        migrations.AlterUniqueTogether(
            name='valorantplayermembership',
            unique_together={('team', 'profile')},
        ),
        migrations.AddConstraint(
            model_name='pubgteam',
            constraint=models.UniqueConstraint(fields=('game', 'slug'), name='unique_pubg_team_slug'),
        ),
        migrations.AddConstraint(
            model_name='pubgplayermembership',
            constraint=models.UniqueConstraint(condition=models.Q(('is_captain', True), ('status', 'ACTIVE')), fields=('team',), name='one_captain_per_pubg_team'),
        ),
        migrations.AlterUniqueTogether(
            name='pubgplayermembership',
            unique_together={('team', 'profile')},
        ),
        migrations.AddConstraint(
            model_name='mlbbteam',
            constraint=models.UniqueConstraint(fields=('game', 'slug'), name='unique_mlbb_team_slug'),
        ),
        migrations.AddConstraint(
            model_name='mlbbplayermembership',
            constraint=models.UniqueConstraint(condition=models.Q(('is_captain', True), ('status', 'ACTIVE')), fields=('team',), name='one_captain_per_mlbb_team'),
        ),
        migrations.AlterUniqueTogether(
            name='mlbbplayermembership',
            unique_together={('team', 'profile')},
        ),
        migrations.AddConstraint(
            model_name='freefireteam',
            constraint=models.UniqueConstraint(fields=('game', 'slug'), name='unique_freefire_team_slug'),
        ),
        migrations.AddConstraint(
            model_name='freefireplayermembership',
            constraint=models.UniqueConstraint(condition=models.Q(('is_captain', True), ('status', 'ACTIVE')), fields=('team',), name='one_captain_per_freefire_team'),
        ),
        migrations.AlterUniqueTogether(
            name='freefireplayermembership',
            unique_together={('team', 'profile')},
        ),
        migrations.AddConstraint(
            model_name='fc26team',
            constraint=models.UniqueConstraint(fields=('game', 'slug'), name='unique_fc26_team_slug'),
        ),
        migrations.AddConstraint(
            model_name='fc26playermembership',
            constraint=models.UniqueConstraint(condition=models.Q(('is_captain', True), ('status', 'ACTIVE')), fields=('team',), name='one_captain_per_fc26_team'),
        ),
        migrations.AlterUniqueTogether(
            name='fc26playermembership',
            unique_together={('team', 'profile')},
        ),
        migrations.AddConstraint(
            model_name='efootballteam',
            constraint=models.UniqueConstraint(fields=('game', 'slug'), name='unique_efootball_team_slug'),
        ),
        migrations.AddConstraint(
            model_name='efootballplayermembership',
            constraint=models.UniqueConstraint(condition=models.Q(('is_captain', True), ('status', 'ACTIVE')), fields=('team',), name='one_captain_per_efootball_team'),
        ),
        migrations.AlterUniqueTogether(
            name='efootballplayermembership',
            unique_together={('team', 'profile')},
        ),
        migrations.AddConstraint(
            model_name='dota2team',
            constraint=models.UniqueConstraint(fields=('game', 'slug'), name='unique_dota2_team_slug'),
        ),
        migrations.AddConstraint(
            model_name='dota2playermembership',
            constraint=models.UniqueConstraint(condition=models.Q(('is_captain', True), ('status', 'ACTIVE')), fields=('team',), name='one_captain_per_dota2_team'),
        ),
        migrations.AddConstraint(
            model_name='dota2playermembership',
            constraint=models.UniqueConstraint(condition=models.Q(('is_starter', True), ('status', 'ACTIVE')), fields=('team', 'role'), name='unique_dota2_position_per_team'),
        ),
        migrations.AlterUniqueTogether(
            name='dota2playermembership',
            unique_together={('team', 'profile')},
        ),
        migrations.AddConstraint(
            model_name='cs2team',
            constraint=models.UniqueConstraint(fields=('game', 'slug'), name='unique_cs2_team_slug'),
        ),
        migrations.AddConstraint(
            model_name='cs2playermembership',
            constraint=models.UniqueConstraint(condition=models.Q(('is_captain', True), ('status', 'ACTIVE')), fields=('team',), name='one_captain_per_cs2_team'),
        ),
        migrations.AlterUniqueTogether(
            name='cs2playermembership',
            unique_together={('team', 'profile')},
        ),
        migrations.AddConstraint(
            model_name='codmteam',
            constraint=models.UniqueConstraint(fields=('game', 'slug'), name='unique_codm_team_slug'),
        ),
        migrations.AddConstraint(
            model_name='codmplayermembership',
            constraint=models.UniqueConstraint(condition=models.Q(('is_captain', True), ('status', 'ACTIVE')), fields=('team',), name='one_captain_per_codm_team'),
        ),
        migrations.AlterUniqueTogether(
            name='codmplayermembership',
            unique_together={('team', 'profile')},
        ),
    ]
