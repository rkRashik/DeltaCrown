# Generated by Django 4.2.24 on 2025-09-21 12:06

import apps.teams.models.social
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    dependencies = [
        ('user_profile', '0007_fix_user_fk_constraint'),
        ('teams', '0019_alter_team_name_alter_team_tag'),
    ]

    operations = [
        migrations.CreateModel(
            name='TeamPost',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('post_type', models.CharField(choices=[('status', 'Status Update'), ('announcement', 'Announcement'), ('achievement', 'Achievement'), ('media', 'Media Post'), ('blog', 'Blog Post'), ('match_result', 'Match Result'), ('recruitment', 'Recruitment')], default='status', max_length=20)),
                ('title', models.CharField(blank=True, help_text='Optional title for the post', max_length=200)),
                ('content', models.TextField(help_text='Post content (supports markdown)', max_length=5000)),
                ('visibility', models.CharField(choices=[('public', 'Public'), ('followers', 'Followers Only'), ('members', 'Team Members Only'), ('private', 'Private')], default='public', max_length=20)),
                ('is_pinned', models.BooleanField(default=False, help_text='Pin this post to the top of team feed')),
                ('is_featured', models.BooleanField(default=False, help_text='Feature this post in community hub')),
                ('likes_count', models.PositiveIntegerField(default=0)),
                ('comments_count', models.PositiveIntegerField(default=0)),
                ('shares_count', models.PositiveIntegerField(default=0)),
                ('views_count', models.PositiveIntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('published_at', models.DateTimeField(blank=True, null=True)),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='team_posts', to='user_profile.userprofile')),
            ],
            options={
                'ordering': ['-is_pinned', '-created_at'],
            },
        ),
        migrations.CreateModel(
            name='TeamPostComment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content', models.TextField(help_text='Comment content', max_length=1000)),
                ('likes_count', models.PositiveIntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_edited', models.BooleanField(default=False)),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='team_post_comments', to='user_profile.userprofile')),
                ('parent', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='replies', to='teams.teampostcomment')),
                ('post', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='comments', to='teams.teampost')),
            ],
            options={
                'ordering': ['created_at'],
            },
        ),
        migrations.AddField(
            model_name='team',
            name='allow_followers',
            field=models.BooleanField(default=True, help_text='Allow users to follow this team'),
        ),
        migrations.AddField(
            model_name='team',
            name='allow_posts',
            field=models.BooleanField(default=True, help_text='Allow team members to post'),
        ),
        migrations.AddField(
            model_name='team',
            name='followers_count',
            field=models.PositiveIntegerField(default=0, help_text='Number of followers'),
        ),
        migrations.AddField(
            model_name='team',
            name='is_featured',
            field=models.BooleanField(default=False, help_text='Featured team status'),
        ),
        migrations.AddField(
            model_name='team',
            name='is_verified',
            field=models.BooleanField(default=False, help_text='Verified team badge'),
        ),
        migrations.AddField(
            model_name='team',
            name='posts_count',
            field=models.PositiveIntegerField(default=0, help_text='Number of posts'),
        ),
        migrations.AddField(
            model_name='team',
            name='posts_require_approval',
            field=models.BooleanField(default=False, help_text='Posts need captain approval'),
        ),
        migrations.CreateModel(
            name='TeamPostMedia',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('media_type', models.CharField(choices=[('image', 'Image'), ('video', 'Video'), ('document', 'Document')], default='image', max_length=20)),
                ('file', models.FileField(upload_to=apps.teams.models.social.team_media_upload_path, validators=[django.core.validators.FileExtensionValidator(allowed_extensions=['jpg', 'jpeg', 'png', 'gif', 'mp4', 'mov', 'pdf', 'doc', 'docx'])])),
                ('caption', models.CharField(blank=True, help_text='Optional caption for the media', max_length=500)),
                ('alt_text', models.CharField(blank=True, help_text='Alternative text for accessibility', max_length=200)),
                ('file_size', models.PositiveIntegerField(blank=True, null=True)),
                ('duration', models.PositiveIntegerField(blank=True, help_text='Duration in seconds for videos', null=True)),
                ('width', models.PositiveIntegerField(blank=True, null=True)),
                ('height', models.PositiveIntegerField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('post', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='media', to='teams.teampost')),
            ],
            options={
                'ordering': ['created_at'],
            },
        ),
        migrations.AddField(
            model_name='teampost',
            name='team',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='posts', to='teams.team'),
        ),
        migrations.CreateModel(
            name='TeamFollower',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('notify_posts', models.BooleanField(default=True)),
                ('notify_matches', models.BooleanField(default=True)),
                ('notify_achievements', models.BooleanField(default=False)),
                ('followed_at', models.DateTimeField(auto_now_add=True)),
                ('follower', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='following_teams', to='user_profile.userprofile')),
                ('team', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='followers', to='teams.team')),
            ],
        ),
        migrations.CreateModel(
            name='TeamActivity',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('activity_type', models.CharField(choices=[('team_created', 'Team Created'), ('member_joined', 'Member Joined'), ('member_left', 'Member Left'), ('captain_changed', 'Captain Changed'), ('post_published', 'Post Published'), ('match_scheduled', 'Match Scheduled'), ('match_completed', 'Match Completed'), ('achievement_earned', 'Achievement Earned'), ('tournament_joined', 'Tournament Joined'), ('tournament_won', 'Tournament Won')], max_length=30)),
                ('description', models.CharField(help_text='Human-readable description of the activity', max_length=500)),
                ('metadata', models.JSONField(blank=True, default=dict, help_text='Additional activity data')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('is_public', models.BooleanField(default=True, help_text='Whether this activity is visible to public')),
                ('actor', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='team_activities', to='user_profile.userprofile')),
                ('related_post', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='teams.teampost')),
                ('related_user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='mentioned_in_activities', to='user_profile.userprofile')),
                ('team', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='activities', to='teams.team')),
            ],
            options={
                'verbose_name_plural': 'Team Activities',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='TeamPostLike',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content_type', models.CharField(choices=[('post', 'Post'), ('comment', 'Comment')], max_length=10)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('comment', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='likes', to='teams.teampostcomment')),
                ('post', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='likes', to='teams.teampost')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='team_post_likes', to='user_profile.userprofile')),
            ],
            options={
                'indexes': [models.Index(fields=['content_type', 'created_at'], name='teams_teamp_content_907a79_idx')],
                'unique_together': {('user', 'comment'), ('user', 'post')},
            },
        ),
        migrations.AddIndex(
            model_name='teampostcomment',
            index=models.Index(fields=['post', 'created_at'], name='teams_teamp_post_id_d011f4_idx'),
        ),
        migrations.AddIndex(
            model_name='teampostcomment',
            index=models.Index(fields=['parent', 'created_at'], name='teams_teamp_parent__96ec36_idx'),
        ),
        migrations.AddIndex(
            model_name='teampost',
            index=models.Index(fields=['team', '-created_at'], name='teams_teamp_team_id_6f448f_idx'),
        ),
        migrations.AddIndex(
            model_name='teampost',
            index=models.Index(fields=['visibility', '-created_at'], name='teams_teamp_visibil_eb0e6f_idx'),
        ),
        migrations.AddIndex(
            model_name='teampost',
            index=models.Index(fields=['is_featured', '-created_at'], name='teams_teamp_is_feat_3e4ac8_idx'),
        ),
        migrations.AddIndex(
            model_name='teamfollower',
            index=models.Index(fields=['team', '-followed_at'], name='teams_teamf_team_id_35cd4a_idx'),
        ),
        migrations.AddIndex(
            model_name='teamfollower',
            index=models.Index(fields=['follower', '-followed_at'], name='teams_teamf_followe_624478_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='teamfollower',
            unique_together={('team', 'follower')},
        ),
        migrations.AddIndex(
            model_name='teamactivity',
            index=models.Index(fields=['team', '-created_at'], name='teams_teama_team_id_66ed68_idx'),
        ),
        migrations.AddIndex(
            model_name='teamactivity',
            index=models.Index(fields=['activity_type', '-created_at'], name='teams_teama_activit_c585a3_idx'),
        ),
        migrations.AddIndex(
            model_name='teamactivity',
            index=models.Index(fields=['is_public', '-created_at'], name='teams_teama_is_publ_3d9302_idx'),
        ),
    ]
