# Generated by Django 4.2.24 on 2025-10-09 12:26

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('tournaments', '0044_alter_tournamentfinance_prize_distribution'),
        ('user_profile', '0007_fix_user_fk_constraint'),
        ('teams', '0040_add_game_specific_team_models'),
    ]

    operations = [
        migrations.CreateModel(
            name='TeamTournamentRegistration',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.CharField(choices=[('pending', 'Pending Review'), ('approved', 'Approved'), ('rejected', 'Rejected'), ('cancelled', 'Cancelled'), ('confirmed', 'Confirmed')], default='pending', max_length=16)),
                ('roster_snapshot', models.JSONField(default=dict, help_text='Snapshot of team roster at registration time (player IDs, roles, IGNs)')),
                ('validation_passed', models.BooleanField(default=False, help_text='Whether roster validation passed')),
                ('validation_errors', models.JSONField(default=list, help_text='List of validation errors if any')),
                ('max_roster_size', models.PositiveIntegerField(blank=True, help_text='Max roster for this tournament (overrides game default)', null=True)),
                ('min_starters', models.PositiveIntegerField(blank=True, help_text='Minimum starting players required', null=True)),
                ('allowed_roles', models.JSONField(blank=True, default=list, help_text='Specific roles allowed for this tournament (empty = all)')),
                ('is_roster_locked', models.BooleanField(default=False, help_text='Whether roster is locked for this tournament')),
                ('locked_at', models.DateTimeField(blank=True, help_text='When roster was locked', null=True)),
                ('payment_reference', models.CharField(blank=True, help_text='Payment transaction reference', max_length=100)),
                ('payment_verified', models.BooleanField(default=False, help_text='Whether payment has been verified')),
                ('payment_verified_at', models.DateTimeField(blank=True, null=True)),
                ('admin_notes', models.TextField(blank=True, help_text='Internal admin notes about this registration')),
                ('rejection_reason', models.TextField(blank=True, help_text='Reason for rejection if applicable')),
                ('registered_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('payment_verified_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='verified_team_registrations', to=settings.AUTH_USER_MODEL)),
                ('registered_by', models.ForeignKey(help_text='Captain who registered the team', on_delete=django.db.models.deletion.PROTECT, related_name='team_tournament_registrations', to='user_profile.userprofile')),
                ('team', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tournament_registrations', to='teams.team')),
                ('tournament', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='team_registrations_v2', to='tournaments.tournament')),
            ],
            options={
                'verbose_name': 'Team Tournament Registration',
                'verbose_name_plural': 'Team Tournament Registrations',
                'db_table': 'teams_tournament_registration',
                'ordering': ['-registered_at'],
            },
        ),
        migrations.CreateModel(
            name='TournamentRosterLock',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_unlock', models.BooleanField(default=False, help_text='True if this is an unlock event, False for lock')),
                ('locked_by_system', models.BooleanField(default=False, help_text='Whether lock was automatic (tournament start)')),
                ('reason', models.TextField(blank=True, help_text='Reason for lock/unlock')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('registration', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='lock_history', to='teams.teamtournamentregistration')),
                ('unlocked_by', models.ForeignKey(blank=True, help_text='Admin who unlocked roster (if manual)', null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Tournament Roster Lock',
                'verbose_name_plural': 'Tournament Roster Locks',
                'db_table': 'teams_tournament_roster_lock',
                'ordering': ['-created_at'],
                'indexes': [models.Index(fields=['registration', '-created_at'], name='teams_tourn_registr_0349bb_idx')],
            },
        ),
        migrations.CreateModel(
            name='TournamentParticipation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('role', models.CharField(help_text="Player's role in the team for this tournament", max_length=16)),
                ('is_starter', models.BooleanField(default=True, help_text='Whether player is in starting lineup')),
                ('matches_played', models.PositiveIntegerField(default=0, help_text='Number of matches this player participated in')),
                ('mvp_count', models.PositiveIntegerField(default=0, help_text='Number of times player was MVP')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('player', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tournament_participations', to='user_profile.userprofile')),
                ('registration', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='participations', to='teams.teamtournamentregistration')),
            ],
            options={
                'verbose_name': 'Tournament Participation',
                'verbose_name_plural': 'Tournament Participations',
                'db_table': 'teams_tournament_participation',
                'ordering': ['-created_at'],
                'indexes': [models.Index(fields=['player', 'registration'], name='teams_tourn_player__cfb1a3_idx'), models.Index(fields=['registration', 'is_starter'], name='teams_tourn_registr_039227_idx')],
            },
        ),
        migrations.AddConstraint(
            model_name='tournamentparticipation',
            constraint=models.UniqueConstraint(fields=('registration', 'player'), name='unique_player_per_registration'),
        ),
        migrations.AddIndex(
            model_name='teamtournamentregistration',
            index=models.Index(fields=['tournament', 'status'], name='teams_tourn_tournam_00b2f4_idx'),
        ),
        migrations.AddIndex(
            model_name='teamtournamentregistration',
            index=models.Index(fields=['team', 'tournament'], name='teams_tourn_team_id_4ef1a7_idx'),
        ),
        migrations.AddIndex(
            model_name='teamtournamentregistration',
            index=models.Index(fields=['status', '-registered_at'], name='teams_tourn_status_f33ab9_idx'),
        ),
        migrations.AddConstraint(
            model_name='teamtournamentregistration',
            constraint=models.UniqueConstraint(fields=('team', 'tournament'), name='unique_team_tournament_registration'),
        ),
    ]
