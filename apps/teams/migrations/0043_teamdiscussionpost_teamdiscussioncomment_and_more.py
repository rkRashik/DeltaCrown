# Generated by Django 4.2.24 on 2025-10-09 15:15

import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    dependencies = [
        ('user_profile', '0007_fix_user_fk_constraint'),
        ('teams', '0042_matchparticipation_matchrecord_and_more'),
    ]

    operations = [
        migrations.CreateModel(
            name='TeamDiscussionPost',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('post_type', models.CharField(choices=[('general', 'General Discussion'), ('announcement', 'Announcement'), ('strategy', 'Strategy & Tactics'), ('recruitment', 'Recruitment'), ('question', 'Question'), ('feedback', 'Feedback'), ('event', 'Event')], default='general', help_text='Category/type of post', max_length=20)),
                ('title', models.CharField(help_text='Post title', max_length=200)),
                ('slug', models.SlugField(help_text='URL-friendly version of title', max_length=250)),
                ('content', models.TextField(help_text='Post content (supports markdown)')),
                ('is_public', models.BooleanField(default=False, help_text='Whether non-team members can view')),
                ('is_pinned', models.BooleanField(default=False, help_text='Pin to top of discussion board')),
                ('is_locked', models.BooleanField(default=False, help_text='Prevent new comments')),
                ('is_deleted', models.BooleanField(default=False, help_text='Soft delete flag')),
                ('views_count', models.PositiveIntegerField(default=0, help_text='Number of times viewed')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('deleted_at', models.DateTimeField(blank=True, null=True)),
                ('last_activity_at', models.DateTimeField(auto_now_add=True, help_text='Last comment or update time')),
                ('author', models.ForeignKey(help_text='User who created the post', on_delete=django.db.models.deletion.CASCADE, related_name='discussion_posts', to='user_profile.userprofile')),
                ('likes', models.ManyToManyField(blank=True, help_text='Users who liked this post', related_name='liked_posts', to='user_profile.userprofile')),
                ('team', models.ForeignKey(help_text='Team this post belongs to', on_delete=django.db.models.deletion.CASCADE, related_name='discussion_posts', to='teams.team')),
            ],
            options={
                'verbose_name': 'Discussion Post',
                'verbose_name_plural': 'Discussion Posts',
                'db_table': 'teams_discussion_post',
                'ordering': ['-is_pinned', '-last_activity_at'],
            },
        ),
        migrations.CreateModel(
            name='TeamDiscussionComment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content', models.TextField(help_text='Comment content (supports markdown)')),
                ('is_edited', models.BooleanField(default=False, help_text='Whether comment has been edited')),
                ('is_deleted', models.BooleanField(default=False, help_text='Soft delete flag')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('edited_at', models.DateTimeField(blank=True, null=True)),
                ('deleted_at', models.DateTimeField(blank=True, null=True)),
                ('author', models.ForeignKey(help_text='User who wrote the comment', on_delete=django.db.models.deletion.CASCADE, related_name='discussion_comments', to='user_profile.userprofile')),
                ('likes', models.ManyToManyField(blank=True, help_text='Users who liked this comment', related_name='liked_comments', to='user_profile.userprofile')),
                ('post', models.ForeignKey(help_text='Post this comment belongs to', on_delete=django.db.models.deletion.CASCADE, related_name='comments', to='teams.teamdiscussionpost')),
                ('reply_to', models.ForeignKey(blank=True, help_text='Parent comment if this is a reply', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='replies', to='teams.teamdiscussioncomment')),
            ],
            options={
                'verbose_name': 'Discussion Comment',
                'verbose_name_plural': 'Discussion Comments',
                'db_table': 'teams_discussion_comment',
                'ordering': ['created_at'],
            },
        ),
        migrations.CreateModel(
            name='TeamChatMessage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('message', models.TextField(help_text='Message content (supports markdown)')),
                ('attachment', models.FileField(blank=True, help_text='Optional file attachment', null=True, upload_to='team_chat/%Y/%m/%d/', validators=[django.core.validators.FileExtensionValidator(allowed_extensions=['jpg', 'jpeg', 'png', 'gif', 'pdf', 'doc', 'docx', 'txt'])])),
                ('attachment_type', models.CharField(blank=True, choices=[('image', 'Image'), ('document', 'Document'), ('other', 'Other')], help_text='Type of attachment', max_length=20)),
                ('is_edited', models.BooleanField(default=False, help_text='Whether message has been edited')),
                ('is_deleted', models.BooleanField(default=False, help_text='Soft delete flag')),
                ('is_pinned', models.BooleanField(default=False, help_text='Whether message is pinned to chat')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('edited_at', models.DateTimeField(blank=True, null=True)),
                ('deleted_at', models.DateTimeField(blank=True, null=True)),
                ('mentions', models.ManyToManyField(blank=True, help_text='Users mentioned in this message (@username)', related_name='mentioned_in_messages', to='user_profile.userprofile')),
                ('reply_to', models.ForeignKey(blank=True, help_text='Original message if this is a reply', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='replies', to='teams.teamchatmessage')),
                ('sender', models.ForeignKey(help_text='User who sent the message', on_delete=django.db.models.deletion.CASCADE, related_name='sent_messages', to='user_profile.userprofile')),
                ('team', models.ForeignKey(help_text='Team this message belongs to', on_delete=django.db.models.deletion.CASCADE, related_name='chat_messages', to='teams.team')),
            ],
            options={
                'verbose_name': 'Team Chat Message',
                'verbose_name_plural': 'Team Chat Messages',
                'db_table': 'teams_chat_message',
                'ordering': ['created_at'],
            },
        ),
        migrations.CreateModel(
            name='DiscussionSubscription',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('notify_on_comment', models.BooleanField(default=True, help_text='Notify when new comments are added')),
                ('notify_on_like', models.BooleanField(default=False, help_text='Notify when post is liked')),
                ('subscribed_at', models.DateTimeField(auto_now_add=True)),
                ('post', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='subscriptions', to='teams.teamdiscussionpost')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='discussion_subscriptions', to='user_profile.userprofile')),
            ],
            options={
                'verbose_name': 'Discussion Subscription',
                'verbose_name_plural': 'Discussion Subscriptions',
                'db_table': 'teams_discussion_subscription',
            },
        ),
        migrations.CreateModel(
            name='DiscussionNotification',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('notification_type', models.CharField(choices=[('new_comment', 'New Comment'), ('new_reply', 'New Reply to Your Comment'), ('post_liked', 'Post Liked'), ('comment_liked', 'Comment Liked'), ('post_pinned', 'Post Pinned'), ('mentioned', 'Mentioned in Post/Comment')], max_length=20)),
                ('is_read', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('read_at', models.DateTimeField(blank=True, null=True)),
                ('actor', models.ForeignKey(help_text='User who triggered the notification', on_delete=django.db.models.deletion.CASCADE, related_name='discussion_actions', to='user_profile.userprofile')),
                ('comment', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='notifications', to='teams.teamdiscussioncomment')),
                ('post', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='notifications', to='teams.teamdiscussionpost')),
                ('recipient', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='discussion_notifications', to='user_profile.userprofile')),
            ],
            options={
                'verbose_name': 'Discussion Notification',
                'verbose_name_plural': 'Discussion Notifications',
                'db_table': 'teams_discussion_notification',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='ChatTypingIndicator',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('started_typing_at', models.DateTimeField(auto_now=True)),
                ('team', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='typing_indicators', to='teams.team')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='typing_indicators', to='user_profile.userprofile')),
            ],
            options={
                'verbose_name': 'Chat Typing Indicator',
                'verbose_name_plural': 'Chat Typing Indicators',
                'db_table': 'teams_chat_typing',
            },
        ),
        migrations.CreateModel(
            name='ChatReadReceipt',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('last_read_at', models.DateTimeField(auto_now=True)),
                ('last_read_message', models.ForeignKey(help_text='Last message read by this user in this team', on_delete=django.db.models.deletion.CASCADE, to='teams.teamchatmessage')),
                ('team', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='chat_read_receipts', to='teams.team')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='chat_read_receipts', to='user_profile.userprofile')),
            ],
            options={
                'verbose_name': 'Chat Read Receipt',
                'verbose_name_plural': 'Chat Read Receipts',
                'db_table': 'teams_chat_read_receipt',
            },
        ),
        migrations.CreateModel(
            name='ChatMessageReaction',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('emoji', models.CharField(help_text='Emoji or reaction identifier', max_length=50)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('message', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reactions', to='teams.teamchatmessage')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='chat_reactions', to='user_profile.userprofile')),
            ],
            options={
                'verbose_name': 'Chat Message Reaction',
                'verbose_name_plural': 'Chat Message Reactions',
                'db_table': 'teams_chat_reaction',
            },
        ),
        migrations.AddIndex(
            model_name='teamdiscussionpost',
            index=models.Index(fields=['team', '-last_activity_at'], name='teams_discu_team_id_3fe107_idx'),
        ),
        migrations.AddIndex(
            model_name='teamdiscussionpost',
            index=models.Index(fields=['team', 'post_type', '-last_activity_at'], name='teams_discu_team_id_a3cadc_idx'),
        ),
        migrations.AddIndex(
            model_name='teamdiscussionpost',
            index=models.Index(fields=['author', '-created_at'], name='teams_discu_author__8de515_idx'),
        ),
        migrations.AddIndex(
            model_name='teamdiscussionpost',
            index=models.Index(fields=['-is_pinned', '-last_activity_at'], name='teams_discu_is_pinn_13f665_idx'),
        ),
        migrations.AddIndex(
            model_name='teamdiscussionpost',
            index=models.Index(fields=['is_deleted'], name='teams_discu_is_dele_2aa75f_idx'),
        ),
        migrations.AddIndex(
            model_name='teamdiscussioncomment',
            index=models.Index(fields=['post', 'created_at'], name='teams_discu_post_id_ce7ee5_idx'),
        ),
        migrations.AddIndex(
            model_name='teamdiscussioncomment',
            index=models.Index(fields=['author', '-created_at'], name='teams_discu_author__d85c29_idx'),
        ),
        migrations.AddIndex(
            model_name='teamdiscussioncomment',
            index=models.Index(fields=['reply_to', 'created_at'], name='teams_discu_reply_t_4a31ce_idx'),
        ),
        migrations.AddIndex(
            model_name='teamchatmessage',
            index=models.Index(fields=['team', 'created_at'], name='teams_chat__team_id_ff7796_idx'),
        ),
        migrations.AddIndex(
            model_name='teamchatmessage',
            index=models.Index(fields=['sender', 'created_at'], name='teams_chat__sender__73e26d_idx'),
        ),
        migrations.AddIndex(
            model_name='teamchatmessage',
            index=models.Index(fields=['is_deleted', 'created_at'], name='teams_chat__is_dele_3b2d20_idx'),
        ),
        migrations.AddIndex(
            model_name='discussionsubscription',
            index=models.Index(fields=['user', 'subscribed_at'], name='teams_discu_user_id_916d9b_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='discussionsubscription',
            unique_together={('user', 'post')},
        ),
        migrations.AddIndex(
            model_name='discussionnotification',
            index=models.Index(fields=['recipient', '-created_at'], name='teams_discu_recipie_e82748_idx'),
        ),
        migrations.AddIndex(
            model_name='discussionnotification',
            index=models.Index(fields=['recipient', 'is_read', '-created_at'], name='teams_discu_recipie_22ea59_idx'),
        ),
        migrations.AddIndex(
            model_name='chattypingindicator',
            index=models.Index(fields=['team', 'started_typing_at'], name='teams_chat__team_id_281f41_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='chattypingindicator',
            unique_together={('user', 'team')},
        ),
        migrations.AddIndex(
            model_name='chatreadreceipt',
            index=models.Index(fields=['user', 'team'], name='teams_chat__user_id_a4260e_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='chatreadreceipt',
            unique_together={('user', 'team')},
        ),
        migrations.AddIndex(
            model_name='chatmessagereaction',
            index=models.Index(fields=['message', 'emoji'], name='teams_chat__message_723130_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='chatmessagereaction',
            unique_together={('message', 'user', 'emoji')},
        ),
    ]
