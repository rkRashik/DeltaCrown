# Generated by Django 4.2.23 on 2025-10-09 14:42

from decimal import Decimal
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    dependencies = [
        ('tournaments', '0044_alter_tournamentfinance_prize_distribution'),
        ('user_profile', '0007_fix_user_fk_constraint'),
        ('teams', '0041_teamtournamentregistration_tournamentrosterlock_and_more'),
    ]

    operations = [
        migrations.CreateModel(
            name='MatchParticipation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('role_played', models.CharField(help_text='Role/position played in this match', max_length=50)),
                ('was_starter', models.BooleanField(default=True, help_text='Whether player started or was substitute')),
                ('was_mvp', models.BooleanField(default=False, help_text='Whether player was awarded MVP for this match')),
                ('performance_score', models.DecimalField(decimal_places=2, default=Decimal('0.00'), help_text='Individual performance score for this match', max_digits=6)),
                ('game_specific_performance', models.JSONField(default=dict, help_text='Game-specific performance metrics (kills, deaths, assists, etc.)')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'verbose_name': 'Match Participation',
                'verbose_name_plural': 'Match Participations',
                'db_table': 'teams_analytics_match_participation',
            },
        ),
        migrations.CreateModel(
            name='MatchRecord',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('opponent_name', models.CharField(help_text='Name of the opponent team', max_length=200)),
                ('match_date', models.DateTimeField(help_text='When the match was played')),
                ('game', models.CharField(help_text='Game played', max_length=50)),
                ('result', models.CharField(choices=[('win', 'Win'), ('loss', 'Loss'), ('draw', 'Draw')], help_text='Match outcome', max_length=10)),
                ('score', models.CharField(help_text="Match score (e.g., '13-7', '2-1', '3-0')", max_length=50)),
                ('team_score', models.PositiveIntegerField(default=0, help_text="Our team's score")),
                ('opponent_score', models.PositiveIntegerField(default=0, help_text="Opponent's score")),
                ('map_played', models.CharField(blank=True, help_text='Map or arena where match was played', max_length=100)),
                ('duration_minutes', models.PositiveIntegerField(blank=True, help_text='Match duration in minutes', null=True)),
                ('points_earned', models.IntegerField(default=0, help_text='Points earned/lost from this match')),
                ('game_specific_data', models.JSONField(default=dict, help_text='Additional game-specific match data')),
                ('notes', models.TextField(blank=True, help_text='Match notes or highlights')),
                ('replay_url', models.URLField(blank=True, help_text='URL to match replay or VOD')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('opponent_team', models.ForeignKey(blank=True, help_text='Opponent team (if in our system)', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='matches_against', to='teams.team')),
                ('participants', models.ManyToManyField(related_name='match_participations', through='teams.MatchParticipation', to='user_profile.userprofile')),
                ('team', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='match_records', to='teams.team')),
                ('tournament', models.ForeignKey(blank=True, help_text='Tournament this match was part of (if any)', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='match_records', to='tournaments.tournament')),
            ],
            options={
                'verbose_name': 'Match Record',
                'verbose_name_plural': 'Match Records',
                'db_table': 'teams_analytics_match_record',
                'ordering': ['-match_date'],
            },
        ),
        migrations.AddField(
            model_name='matchparticipation',
            name='match',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='player_participations', to='teams.matchrecord'),
        ),
        migrations.AddField(
            model_name='matchparticipation',
            name='player',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='match_participation_records', to='user_profile.userprofile'),
        ),
        migrations.CreateModel(
            name='TeamAnalytics',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('game', models.CharField(help_text='Game for which these stats apply', max_length=50)),
                ('total_matches', models.PositiveIntegerField(default=0, help_text='Total matches played')),
                ('matches_won', models.PositiveIntegerField(default=0, help_text='Total matches won')),
                ('matches_lost', models.PositiveIntegerField(default=0, help_text='Total matches lost')),
                ('matches_drawn', models.PositiveIntegerField(default=0, help_text='Total matches drawn')),
                ('win_rate', models.DecimalField(decimal_places=2, default=Decimal('0.00'), help_text='Win percentage (0-100)', max_digits=5, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('total_points', models.PositiveIntegerField(default=0, help_text='Total points earned')),
                ('points_history', models.JSONField(default=list, help_text='Historical points data: [{date, points, change, reason}]')),
                ('tournaments_participated', models.PositiveIntegerField(default=0, help_text='Total tournaments entered')),
                ('tournaments_won', models.PositiveIntegerField(default=0, help_text='Total tournaments won')),
                ('game_specific_stats', models.JSONField(default=dict, help_text='Game-specific statistics (maps, heroes, etc.)')),
                ('current_streak', models.IntegerField(default=0, help_text='Current win/loss streak (positive = wins, negative = losses)')),
                ('best_win_streak', models.PositiveIntegerField(default=0, help_text='Best winning streak achieved')),
                ('last_match_date', models.DateTimeField(blank=True, help_text='Date of last match played', null=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('team', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='statistics', to='teams.team')),
            ],
            options={
                'verbose_name': 'Team Analytics',
                'verbose_name_plural': 'Team Analytics',
                'db_table': 'teams_analytics_team_stats',
                'indexes': [models.Index(fields=['team', 'game'], name='teams_analy_team_id_853a9b_idx'), models.Index(fields=['win_rate'], name='teams_analy_win_rat_9aac2e_idx'), models.Index(fields=['-total_points'], name='teams_analy_total_p_8f2287_idx')],
                'unique_together': {('team', 'game')},
            },
        ),
        migrations.CreateModel(
            name='PlayerStats',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('game', models.CharField(help_text='Game for which these stats apply', max_length=50)),
                ('tournaments_played', models.PositiveIntegerField(default=0, help_text='Total tournaments participated in')),
                ('matches_played', models.PositiveIntegerField(default=0, help_text='Total matches played')),
                ('matches_won', models.PositiveIntegerField(default=0, help_text='Matches won')),
                ('attendance_rate', models.DecimalField(decimal_places=2, default=Decimal('100.00'), help_text='Attendance percentage (0-100)', max_digits=5, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('mvp_count', models.PositiveIntegerField(default=0, help_text='Number of times awarded MVP')),
                ('contribution_score', models.DecimalField(decimal_places=2, default=Decimal('0.00'), help_text='Overall contribution score', max_digits=6)),
                ('individual_rating', models.DecimalField(decimal_places=2, default=Decimal('1000.00'), help_text='Individual skill rating', max_digits=6)),
                ('game_specific_stats', models.JSONField(default=dict, help_text='Game-specific performance metrics (KDA, accuracy, etc.)')),
                ('last_active', models.DateTimeField(blank=True, help_text='Last time player was active in a match', null=True)),
                ('is_active', models.BooleanField(default=True, help_text='Whether player is currently active in the team')),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('player', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='player_statistics', to='user_profile.userprofile')),
                ('team', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='player_stats', to='teams.team')),
            ],
            options={
                'verbose_name': 'Player Analytics',
                'verbose_name_plural': 'Player Analytics',
                'db_table': 'teams_analytics_player_stats',
                'indexes': [models.Index(fields=['team', 'game'], name='teams_analy_team_id_8ed44f_idx'), models.Index(fields=['player', 'game'], name='teams_analy_player__bfb65c_idx'), models.Index(fields=['-contribution_score'], name='teams_analy_contrib_e5474b_idx'), models.Index(fields=['-mvp_count'], name='teams_analy_mvp_cou_6bcd28_idx')],
                'unique_together': {('player', 'team', 'game')},
            },
        ),
        migrations.AddIndex(
            model_name='matchrecord',
            index=models.Index(fields=['team', '-match_date'], name='teams_analy_team_id_a5ad31_idx'),
        ),
        migrations.AddIndex(
            model_name='matchrecord',
            index=models.Index(fields=['tournament', '-match_date'], name='teams_analy_tournam_7636f8_idx'),
        ),
        migrations.AddIndex(
            model_name='matchrecord',
            index=models.Index(fields=['game', '-match_date'], name='teams_analy_game_55e342_idx'),
        ),
        migrations.AddIndex(
            model_name='matchrecord',
            index=models.Index(fields=['result'], name='teams_analy_result_f9a53e_idx'),
        ),
        migrations.AddIndex(
            model_name='matchparticipation',
            index=models.Index(fields=['match', 'player'], name='teams_analy_match_i_8dd158_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='matchparticipation',
            unique_together={('match', 'player')},
        ),
    ]
