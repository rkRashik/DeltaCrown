# Generated by Django 4.2.24

from django.db import migrations
from django.core.files.base import File
import os


def migrate_media_data(apps, schema_editor):
    """
    Migrate media data from Tournament to TournamentMedia.
    
    This migration:
    1. Creates TournamentMedia records for tournaments with media
    2. Copies banner field to logo field (based on current usage)
    3. Sets default thumbnail visibility
    4. Preserves file references
    """
    Tournament = apps.get_model('tournaments', 'Tournament')
    TournamentMedia = apps.get_model('tournaments', 'TournamentMedia')
    
    print("\n" + "="*70)
    print("üé® Migrating media data from Tournament to TournamentMedia")
    print("="*70)
    
    tournaments = Tournament.objects.all()
    total = tournaments.count()
    
    print(f"\nüìä Found {total} tournaments to process...")
    
    created_count = 0
    skipped_count = 0
    error_count = 0
    
    for idx, tournament in enumerate(tournaments, 1):
        try:
            # Skip if TournamentMedia already exists
            if hasattr(tournament, 'media') and tournament.media:
                print(f"‚è≠Ô∏è  [{idx}/{total}] Skipped: {tournament.name} (media already exists)")
                skipped_count += 1
                continue
            
            # Check if tournament has any media
            has_banner = bool(tournament.banner)
            
            if not has_banner:
                print(f"‚è≠Ô∏è  [{idx}/{total}] Skipped: {tournament.name} (no media)")
                skipped_count += 1
                continue
            
            # Create TournamentMedia
            media = TournamentMedia.objects.create(
                tournament=tournament,
                logo=tournament.banner if has_banner else '',  # Banner becomes logo
                logo_alt_text=f"{tournament.name} Logo",
                show_logo_on_card=True,
                show_logo_on_detail=True,
                # Banner and thumbnail left empty for now (can be set separately)
                banner='',
                banner_alt_text='',
                thumbnail='',
                thumbnail_alt_text='',
                thumbnail_width=None,
                thumbnail_height=None,
            )
            
            print(f"‚úÖ [{idx}/{total}] Created media for: {tournament.name}")
            if has_banner:
                print(f"    üì∏ Logo: {tournament.banner}")
            
            created_count += 1
            
        except Exception as e:
            print(f"‚ùå [{idx}/{total}] Error processing {tournament.name}: {str(e)}")
            error_count += 1
            continue
    
    print("\n" + "="*70)
    print("üìà Migration Summary")
    print("="*70)
    print(f"Total tournaments: {total}")
    print(f"Media records created: {created_count}")
    print(f"Skipped: {skipped_count}")
    print(f"Errors: {error_count}")
    
    if created_count > 0:
        print(f"\n‚úÖ Successfully created {created_count} TournamentMedia record(s)!")
    elif skipped_count == total:
        print("\n‚ÑπÔ∏è  No new media records created (all tournaments already migrated or have no media)")
    
    if error_count > 0:
        print(f"\n‚ö†Ô∏è  Warning: {error_count} error(s) occurred during migration")
    
    print("="*70 + "\n")


def reverse_migration(apps, schema_editor):
    """
    Reverse the migration by deleting TournamentMedia records.
    
    Note: This does NOT restore data to Tournament.banner field.
    The original data is preserved in both locations during Phase 2.
    """
    TournamentMedia = apps.get_model('tournaments', 'TournamentMedia')
    
    print("\n" + "="*70)
    print("‚èÆÔ∏è  Reversing TournamentMedia migration")
    print("="*70)
    
    count = TournamentMedia.objects.count()
    TournamentMedia.objects.all().delete()
    
    print(f"\n‚úÖ Deleted {count} TournamentMedia record(s)")
    print("="*70 + "\n")


class Migration(migrations.Migration):

    dependencies = [
        ('tournaments', '0039_create_tournament_archive'),
    ]

    operations = [
        migrations.RunPython(
            migrate_media_data,
            reverse_migration
        ),
    ]
