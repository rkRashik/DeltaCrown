# Generated by Django 4.2.23 on 2025-10-03
# Data migration to copy schedule data from Tournament to TournamentSchedule

from django.db import migrations


def migrate_schedule_data_forward(apps, schema_editor):
    """
    Copy schedule data from Tournament model to TournamentSchedule model.
    This runs when migrating forward (applying the migration).
    """
    Tournament = apps.get_model('tournaments', 'Tournament')
    TournamentSchedule = apps.get_model('tournaments', 'TournamentSchedule')
    
    # Track statistics
    total_tournaments = 0
    schedules_created = 0
    schedules_skipped = 0
    errors = []
    
    print("\n" + "="*70)
    print("üîÑ Migrating schedule data from Tournament to TournamentSchedule")
    print("="*70)
    
    # Get all tournaments
    tournaments = Tournament.objects.all()
    total_tournaments = tournaments.count()
    
    print(f"\nüìä Found {total_tournaments} tournaments to process...")
    print()
    
    for tournament in tournaments:
        try:
            # Check if schedule already exists (in case migration is re-run)
            if hasattr(tournament, 'schedule') and TournamentSchedule.objects.filter(tournament=tournament).exists():
                print(f"‚è≠Ô∏è  Skipped: {tournament.name} (schedule already exists)")
                schedules_skipped += 1
                continue
            
            # Check if tournament has any schedule data
            has_schedule_data = any([
                tournament.reg_open_at,
                tournament.reg_close_at,
                tournament.start_at,
                tournament.end_at,
            ])
            
            if not has_schedule_data:
                print(f"‚è≠Ô∏è  Skipped: {tournament.name} (no schedule data)")
                schedules_skipped += 1
                continue
            
            # Create TournamentSchedule from Tournament data
            schedule = TournamentSchedule.objects.create(
                tournament=tournament,
                reg_open_at=tournament.reg_open_at,
                reg_close_at=tournament.reg_close_at,
                start_at=tournament.start_at,
                end_at=tournament.end_at,
                # Default check-in values (can be customized later by admins)
                check_in_open_mins=60,
                check_in_close_mins=10,
            )
            
            print(f"‚úÖ Created: {tournament.name}")
            schedules_created += 1
            
        except Exception as e:
            error_msg = f"‚ùå Error processing {tournament.name}: {str(e)}"
            print(error_msg)
            errors.append(error_msg)
    
    # Print summary
    print()
    print("="*70)
    print("üìà Migration Summary")
    print("="*70)
    print(f"Total tournaments: {total_tournaments}")
    print(f"Schedules created: {schedules_created}")
    print(f"Schedules skipped: {schedules_skipped}")
    print(f"Errors: {len(errors)}")
    
    if errors:
        print()
        print("‚ö†Ô∏è  Errors encountered:")
        for error in errors:
            print(f"  {error}")
    
    print()
    
    if schedules_created > 0:
        print(f"‚úÖ Successfully migrated {schedules_created} tournament schedules!")
    else:
        print("‚ÑπÔ∏è  No new schedules created (all tournaments already migrated or have no schedule data)")
    
    print("="*70)
    print()


def migrate_schedule_data_backward(apps, schema_editor):
    """
    Rollback: Delete all TournamentSchedule records.
    This runs when reversing the migration.
    
    Note: Original Tournament data is preserved, so this is safe.
    """
    TournamentSchedule = apps.get_model('tournaments', 'TournamentSchedule')
    
    count = TournamentSchedule.objects.count()
    
    print("\n" + "="*70)
    print("‚è™ Rolling back TournamentSchedule migration")
    print("="*70)
    print(f"\nüóëÔ∏è  Deleting {count} TournamentSchedule records...")
    
    TournamentSchedule.objects.all().delete()
    
    print(f"‚úÖ Deleted {count} schedules")
    print("‚ÑπÔ∏è  Original Tournament data is preserved")
    print("="*70)
    print()


class Migration(migrations.Migration):
    """
    Data migration to populate TournamentSchedule from existing Tournament data.
    
    This migration:
    1. Creates TournamentSchedule records for all tournaments with schedule data
    2. Copies reg_open_at, reg_close_at, start_at, end_at from Tournament
    3. Sets default check-in values (60 mins open, 10 mins close)
    4. Preserves original Tournament data (non-destructive)
    5. Can be safely re-run (skips existing schedules)
    6. Can be rolled back (deletes TournamentSchedule records)
    
    Safe to run on production - no data loss!
    """

    dependencies = [
        ('tournaments', '0031_add_tournament_schedule_pilot'),
    ]

    operations = [
        migrations.RunPython(
            migrate_schedule_data_forward,
            migrate_schedule_data_backward,
        ),
    ]
