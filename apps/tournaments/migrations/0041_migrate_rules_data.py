# Generated by Django 4.2.24

from django.db import migrations


def migrate_rules_data(apps, schema_editor):
    """
    Migrate rules data from Tournament to TournamentRules.
    
    This migration:
    1. Creates TournamentRules records for tournaments
    2. Sets default preservation and requirement settings
    3. Prepares for future rule content migration
    """
    Tournament = apps.get_model('tournaments', 'Tournament')
    TournamentRules = apps.get_model('tournaments', 'TournamentRules')
    
    print("\n" + "="*70)
    print("üìú Migrating rules data from Tournament to TournamentRules")
    print("="*70)
    
    tournaments = Tournament.objects.all()
    total = tournaments.count()
    
    print(f"\nüìä Found {total} tournaments to process...")
    
    created_count = 0
    skipped_count = 0
    error_count = 0
    
    for idx, tournament in enumerate(tournaments, 1):
        try:
            # Skip if TournamentRules already exists
            if hasattr(tournament, 'rules') and tournament.rules:
                print(f"‚è≠Ô∏è  [{idx}/{total}] Skipped: {tournament.name} (rules already exist)")
                skipped_count += 1
                continue
            
            # Create TournamentRules with default settings
            rules = TournamentRules.objects.create(
                tournament=tournament,
                # Rule sections will be populated later or via admin
                general_rules='',
                eligibility_requirements='',
                match_rules='',
                scoring_system='',
                penalty_rules='',
                prize_distribution_rules='',
                additional_notes='',
                checkin_instructions='',
                # Default requirements
                require_discord=False,
                require_game_id=False,
                require_team_logo=False,
                # No restrictions by default
                min_age=None,
                max_age=None,
                region_restriction='',
                rank_restriction='',
            )
            
            print(f"‚úÖ [{idx}/{total}] Created rules for: {tournament.name}")
            created_count += 1
            
        except Exception as e:
            print(f"‚ùå [{idx}/{total}] Error processing {tournament.name}: {str(e)}")
            error_count += 1
            continue
    
    print("\n" + "="*70)
    print("üìà Migration Summary")
    print("="*70)
    print(f"Total tournaments: {total}")
    print(f"Rules records created: {created_count}")
    print(f"Skipped: {skipped_count}")
    print(f"Errors: {error_count}")
    
    if created_count > 0:
        print(f"\n‚úÖ Successfully created {created_count} TournamentRules record(s)!")
    elif skipped_count == total:
        print("\n‚ÑπÔ∏è  No new rules records created (all tournaments already migrated)")
    
    if error_count > 0:
        print(f"\n‚ö†Ô∏è  Warning: {error_count} error(s) occurred during migration")
    
    print("="*70 + "\n")


def reverse_migration(apps, schema_editor):
    """
    Reverse the migration by deleting TournamentRules records.
    """
    TournamentRules = apps.get_model('tournaments', 'TournamentRules')
    
    print("\n" + "="*70)
    print("‚èÆÔ∏è  Reversing TournamentRules migration")
    print("="*70)
    
    count = TournamentRules.objects.count()
    TournamentRules.objects.all().delete()
    
    print(f"\n‚úÖ Deleted {count} TournamentRules record(s)")
    print("="*70 + "\n")


class Migration(migrations.Migration):

    dependencies = [
        ('tournaments', '0040_migrate_media_data'),
    ]

    operations = [
        migrations.RunPython(
            migrate_rules_data,
            reverse_migration
        ),
    ]
