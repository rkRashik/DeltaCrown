# Generated by Django 4.2.24 on 2025-10-13 11:36

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    dependencies = [
        ('tournaments', '0044_alter_tournamentfinance_prize_distribution'),
    ]

    operations = [
        migrations.CreateModel(
            name='GameConfiguration',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('game_code', models.CharField(db_index=True, help_text="Unique identifier for the game (e.g., 'valorant', 'cs2', 'dota2')", max_length=50, unique=True)),
                ('display_name', models.CharField(help_text="Human-readable game name (e.g., 'VALORANT', 'Counter-Strike 2')", max_length=100)),
                ('icon', models.CharField(blank=True, help_text="CSS icon class or image filename (e.g., 'fas fa-crosshairs', 'valorant.png')", max_length=100)),
                ('team_size', models.PositiveIntegerField(default=5, help_text='Number of starting players required for team tournaments')),
                ('sub_count', models.PositiveIntegerField(default=0, help_text='Number of substitute players allowed')),
                ('is_solo', models.BooleanField(default=False, help_text='Does this game support solo (1v1) tournaments?')),
                ('is_team', models.BooleanField(default=True, help_text='Does this game support team tournaments?')),
                ('is_active', models.BooleanField(default=True, help_text='Is this game currently available for tournament creation?')),
                ('description', models.TextField(blank=True, help_text='Brief description or notes about the game')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Game Configuration',
                'verbose_name_plural': 'Game Configurations',
                'db_table': 'tournaments_game_configuration',
                'ordering': ['display_name'],
            },
        ),
        migrations.CreateModel(
            name='PlayerRoleConfiguration',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('role_code', models.CharField(help_text="Internal role identifier (e.g., 'duelist', 'igl', 'pos_1')", max_length=50)),
                ('role_name', models.CharField(help_text="Display name for the role (e.g., 'Duelist', 'In-Game Leader', 'Position 1 - Carry')", max_length=100)),
                ('role_abbreviation', models.CharField(blank=True, help_text="Short abbreviation (e.g., 'IGL', 'Pos 1', 'AWP')", max_length=10)),
                ('is_unique', models.BooleanField(default=False, help_text='Can only one player have this role per team? (e.g., IGL)')),
                ('is_required', models.BooleanField(default=False, help_text='Must at least one player have this role?')),
                ('max_per_team', models.PositiveIntegerField(blank=True, help_text='Maximum number of players with this role (null = no limit)', null=True)),
                ('description', models.TextField(blank=True, help_text="Description of the role's responsibilities")),
                ('display_order', models.PositiveIntegerField(default=0, help_text='Order in which roles appear in dropdowns')),
                ('icon', models.CharField(blank=True, help_text="CSS icon class or image (e.g., 'fas fa-crosshairs')", max_length=100)),
                ('is_active', models.BooleanField(default=True, help_text='Is this role currently available for selection?')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('game', models.ForeignKey(help_text='The game this role belongs to', on_delete=django.db.models.deletion.CASCADE, related_name='role_configurations', to='tournaments.gameconfiguration')),
            ],
            options={
                'verbose_name': 'Player Role Configuration',
                'verbose_name_plural': 'Player Role Configurations',
                'db_table': 'tournaments_player_role_configuration',
                'ordering': ['game', 'display_order', 'role_name'],
            },
        ),
        migrations.CreateModel(
            name='GameFieldConfiguration',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('field_name', models.CharField(help_text="Internal field name (e.g., 'riot_id', 'steam_id', 'discord_id')", max_length=100)),
                ('field_label', models.CharField(help_text="Label displayed to user (e.g., 'Riot ID', 'Steam ID')", max_length=200)),
                ('field_type', models.CharField(choices=[('text', 'Text Input'), ('email', 'Email Input'), ('tel', 'Phone Number'), ('number', 'Number Input'), ('url', 'URL Input'), ('select', 'Dropdown Select'), ('textarea', 'Text Area'), ('file', 'File Upload')], default='text', help_text='HTML input type for the field', max_length=20)),
                ('is_required', models.BooleanField(default=True, help_text='Is this field mandatory?')),
                ('validation_regex', models.CharField(blank=True, help_text="Regular expression for validation (e.g., '^[a-zA-Z0-9]+#[a-zA-Z0-9]+$' for Riot ID)", max_length=500)),
                ('validation_error_message', models.CharField(blank=True, help_text='Error message to show when validation fails', max_length=255)),
                ('min_length', models.PositiveIntegerField(blank=True, help_text='Minimum character length', null=True)),
                ('max_length', models.PositiveIntegerField(blank=True, help_text='Maximum character length', null=True)),
                ('placeholder', models.CharField(blank=True, help_text="Placeholder text (e.g., 'Username#1234')", max_length=255)),
                ('help_text', models.TextField(blank=True, help_text='Instructional text displayed below the field')),
                ('display_order', models.PositiveIntegerField(default=0, help_text='Order in which fields appear (lower numbers first)')),
                ('choices', models.JSONField(blank=True, help_text='JSON array of choices for select fields: [{"value": "pc", "label": "PC"}, ...]', null=True)),
                ('show_condition', models.CharField(blank=True, help_text='JavaScript condition for showing this field (e.g., \'tournament_type == "team"\')', max_length=255)),
                ('is_active', models.BooleanField(default=True, help_text='Is this field currently active?')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('game', models.ForeignKey(help_text='The game this field belongs to', on_delete=django.db.models.deletion.CASCADE, related_name='field_configurations', to='tournaments.gameconfiguration')),
            ],
            options={
                'verbose_name': 'Game Field Configuration',
                'verbose_name_plural': 'Game Field Configurations',
                'db_table': 'tournaments_game_field_configuration',
                'ordering': ['game', 'display_order', 'field_name'],
            },
        ),
        migrations.AddIndex(
            model_name='gameconfiguration',
            index=models.Index(fields=['game_code'], name='tournaments_game_co_6deccb_idx'),
        ),
        migrations.AddIndex(
            model_name='gameconfiguration',
            index=models.Index(fields=['is_active'], name='tournaments_is_acti_0c490c_idx'),
        ),
        migrations.AddIndex(
            model_name='playerroleconfiguration',
            index=models.Index(fields=['game', 'is_active'], name='tournaments_game_id_cf20fa_idx'),
        ),
        migrations.AddIndex(
            model_name='playerroleconfiguration',
            index=models.Index(fields=['display_order'], name='tournaments_display_d4a08c_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='playerroleconfiguration',
            unique_together={('game', 'role_code')},
        ),
        migrations.AddIndex(
            model_name='gamefieldconfiguration',
            index=models.Index(fields=['game', 'is_active'], name='tournaments_game_id_ae6bc0_idx'),
        ),
        migrations.AddIndex(
            model_name='gamefieldconfiguration',
            index=models.Index(fields=['display_order'], name='tournaments_display_7ab612_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='gamefieldconfiguration',
            unique_together={('game', 'field_name')},
        ),
    ]
