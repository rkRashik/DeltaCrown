# Generated by Django 4.2.24 on 2025-10-03 - Data Migration for TournamentFinance
"""
Data Migration: Copy financial data from Tournament to TournamentFinance.

This migration:
1. Identifies tournaments with entry fees and/or prize pools
2. Creates TournamentFinance records with the financial data
3. Sets sensible defaults (currency='BDT', payment_required based on entry_fee)
4. Is idempotent (can be run multiple times safely)
5. Is reversible (can delete created records)

Pre-migration analysis showed:
- 3 tournaments with financial data
- Entry fees: ‡ß≥200-500 (avg: ‡ß≥333)
- Prize pools: ‡ß≥2,000-5,000 (avg: ‡ß≥3,500)
- No data quality issues
"""

from django.db import migrations
from django.db.models import Q
from decimal import Decimal


def migrate_finance_data(apps, schema_editor):
    """Copy financial data from Tournament to TournamentFinance."""
    Tournament = apps.get_model('tournaments', 'Tournament')
    TournamentFinance = apps.get_model('tournaments', 'TournamentFinance')
    
    migrated_count = 0
    skipped_count = 0
    
    print("\n" + "="*70)
    print("  MIGRATING TOURNAMENT FINANCE DATA")
    print("="*70)
    
    # Get all tournaments with any financial data
    tournaments = Tournament.objects.filter(
        Q(entry_fee_bdt__isnull=False, entry_fee_bdt__gt=0) |
        Q(prize_pool_bdt__isnull=False, prize_pool_bdt__gt=0)
    )
    
    total = tournaments.count()
    print(f"\nüìä Found {total} tournament(s) with financial data")
    
    for tournament in tournaments:
        # Check if finance record already exists (idempotent)
        if TournamentFinance.objects.filter(tournament_id=tournament.id).exists():
            print(f"   ‚è≠Ô∏è  Skipping Tournament #{tournament.id} - finance record exists")
            skipped_count += 1
            continue
        
        # Get financial values (handle None)
        entry_fee = tournament.entry_fee_bdt if tournament.entry_fee_bdt is not None else Decimal('0')
        prize_pool = tournament.prize_pool_bdt if tournament.prize_pool_bdt is not None else Decimal('0')
        
        # Create TournamentFinance record
        finance = TournamentFinance.objects.create(
            tournament_id=tournament.id,
            entry_fee_bdt=entry_fee,
            prize_pool_bdt=prize_pool,
            currency='BDT',  # Default currency
            payment_required=(entry_fee > 0),  # Require payment if there's an entry fee
            payment_deadline_hours=72,  # Default 3 days
            prize_distribution={},  # Empty dict - can be configured in admin later
            platform_fee_percent=Decimal('0'),  # No platform fee by default
            refund_policy='',  # Empty - can be configured later
        )
        
        print(f"   ‚úÖ Tournament #{tournament.id}: {tournament.name}")
        print(f"      Entry Fee: ‡ß≥{entry_fee:,.2f} | Prize Pool: ‡ß≥{prize_pool:,.2f}")
        print(f"      Payment Required: {finance.payment_required}")
        
        migrated_count += 1
    
    print(f"\n{'='*70}")
    print(f"‚úÖ Successfully created {migrated_count} TournamentFinance record(s)!")
    if skipped_count > 0:
        print(f"‚è≠Ô∏è  Skipped {skipped_count} record(s) (already existed)")
    print(f"{'='*70}\n")


def reverse_finance_migration(apps, schema_editor):
    """Delete TournamentFinance records created by this migration."""
    TournamentFinance = apps.get_model('tournaments', 'TournamentFinance')
    
    # Only delete records that were likely created by this migration
    # (those with tournaments that still have financial data in the old fields)
    Tournament = apps.get_model('tournaments', 'Tournament')
    
    print("\n" + "="*70)
    print("  REVERSING FINANCE DATA MIGRATION")
    print("="*70)
    
    tournament_ids = list(Tournament.objects.filter(
        Q(entry_fee_bdt__isnull=False, entry_fee_bdt__gt=0) |
        Q(prize_pool_bdt__isnull=False, prize_pool_bdt__gt=0)
    ).values_list('id', flat=True))
    
    deleted_count = TournamentFinance.objects.filter(
        tournament_id__in=tournament_ids
    ).delete()[0]
    
    print(f"\nüóëÔ∏è  Deleted {deleted_count} TournamentFinance record(s)")
    print(f"{'='*70}\n")


class Migration(migrations.Migration):

    dependencies = [
        ('tournaments', '0035_add_tournament_finance'),
    ]

    operations = [
        migrations.RunPython(
            migrate_finance_data,
            reverse_code=reverse_finance_migration
        ),
    ]
