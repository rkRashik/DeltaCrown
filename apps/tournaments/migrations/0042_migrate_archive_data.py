# Generated by Django 4.2.24

from django.db import migrations
from django.utils import timezone


def migrate_archive_data(apps, schema_editor):
    """
    Migrate archive data from Tournament to TournamentArchive.
    
    This migration:
    1. Creates TournamentArchive records for all tournaments
    2. Sets archive status based on tournament status
    3. Initializes preservation settings
    """
    Tournament = apps.get_model('tournaments', 'Tournament')
    TournamentArchive = apps.get_model('tournaments', 'TournamentArchive')
    
    print("\n" + "="*70)
    print("üì¶ Migrating archive data from Tournament to TournamentArchive")
    print("="*70)
    
    tournaments = Tournament.objects.all()
    total = tournaments.count()
    
    print(f"\nüìä Found {total} tournaments to process...")
    
    created_count = 0
    skipped_count = 0
    error_count = 0
    
    for idx, tournament in enumerate(tournaments, 1):
        try:
            # Skip if TournamentArchive already exists
            if hasattr(tournament, 'archive') and tournament.archive:
                print(f"‚è≠Ô∏è  [{idx}/{total}] Skipped: {tournament.name} (archive already exists)")
                skipped_count += 1
                continue
            
            # Determine archive type based on tournament status
            # COMPLETED tournaments could be candidates for archiving
            # But we'll keep them ACTIVE by default for now
            archive_type = 'ACTIVE'
            is_archived = False
            archived_at = None
            
            if tournament.status == 'COMPLETED':
                # Don't auto-archive, but mark as eligible
                can_restore = True
            else:
                can_restore = True
            
            # Create TournamentArchive
            archive = TournamentArchive.objects.create(
                tournament=tournament,
                archive_type=archive_type,
                is_archived=is_archived,
                archived_at=archived_at,
                archived_by=None,
                archive_reason='',
                # Clone fields
                source_tournament=None,
                clone_number=0,
                cloned_at=None,
                cloned_by=None,
                # Restore settings
                can_restore=can_restore,
                restored_at=None,
                restored_by=None,
                # Preservation settings (preserve everything by default)
                preserve_participants=True,
                preserve_matches=True,
                preserve_media=True,
                original_data={},
                notes='',
            )
            
            status_text = f"({tournament.status})" if hasattr(tournament, 'status') else ""
            print(f"‚úÖ [{idx}/{total}] Created archive for: {tournament.name} {status_text}")
            created_count += 1
            
        except Exception as e:
            print(f"‚ùå [{idx}/{total}] Error processing {tournament.name}: {str(e)}")
            error_count += 1
            continue
    
    print("\n" + "="*70)
    print("üìà Migration Summary")
    print("="*70)
    print(f"Total tournaments: {total}")
    print(f"Archive records created: {created_count}")
    print(f"Skipped: {skipped_count}")
    print(f"Errors: {error_count}")
    
    if created_count > 0:
        print(f"\n‚úÖ Successfully created {created_count} TournamentArchive record(s)!")
    elif skipped_count == total:
        print("\n‚ÑπÔ∏è  No new archive records created (all tournaments already migrated)")
    
    if error_count > 0:
        print(f"\n‚ö†Ô∏è  Warning: {error_count} error(s) occurred during migration")
    
    print("="*70 + "\n")


def reverse_migration(apps, schema_editor):
    """
    Reverse the migration by deleting TournamentArchive records.
    """
    TournamentArchive = apps.get_model('tournaments', 'TournamentArchive')
    
    print("\n" + "="*70)
    print("‚èÆÔ∏è  Reversing TournamentArchive migration")
    print("="*70)
    
    count = TournamentArchive.objects.count()
    TournamentArchive.objects.all().delete()
    
    print(f"\n‚úÖ Deleted {count} TournamentArchive record(s)")
    print("="*70 + "\n")


class Migration(migrations.Migration):

    dependencies = [
        ('tournaments', '0041_migrate_rules_data'),
    ]

    operations = [
        migrations.RunPython(
            migrate_archive_data,
            reverse_migration
        ),
    ]
