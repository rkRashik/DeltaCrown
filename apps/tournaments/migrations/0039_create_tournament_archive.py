# Generated by Django 4.2.24 on 2025-10-03 13:50

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('tournaments', '0038_create_tournament_rules'),
    ]

    operations = [
        migrations.CreateModel(
            name='TournamentArchive',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('archive_type', models.CharField(choices=[('ACTIVE', 'Active'), ('ARCHIVED', 'Archived'), ('CLONED', 'Cloned')], default='ACTIVE', help_text='Type of archive status', max_length=20)),
                ('is_archived', models.BooleanField(default=False, help_text='Whether the tournament is archived')),
                ('archived_at', models.DateTimeField(blank=True, help_text='When the tournament was archived', null=True)),
                ('archive_reason', models.TextField(blank=True, help_text='Reason for archiving')),
                ('clone_number', models.PositiveIntegerField(default=0, help_text='Clone generation number (0 = original, 1 = first clone, etc.)')),
                ('cloned_at', models.DateTimeField(blank=True, help_text='When the tournament was cloned', null=True)),
                ('can_restore', models.BooleanField(default=True, help_text='Whether the tournament can be restored from archive')),
                ('restored_at', models.DateTimeField(blank=True, help_text='When the tournament was restored from archive', null=True)),
                ('original_data', models.JSONField(blank=True, default=dict, help_text='Snapshot of tournament data at archive time')),
                ('preserve_participants', models.BooleanField(default=True, help_text='Whether to preserve participant data in archive')),
                ('preserve_matches', models.BooleanField(default=True, help_text='Whether to preserve match data in archive')),
                ('preserve_media', models.BooleanField(default=True, help_text='Whether to preserve media files in archive')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='When this archive record was created')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='When this archive record was last updated')),
                ('notes', models.TextField(blank=True, help_text='Additional notes about the archive')),
                ('archived_by', models.ForeignKey(blank=True, help_text='User who archived the tournament', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='archived_tournaments', to=settings.AUTH_USER_MODEL)),
                ('cloned_by', models.ForeignKey(blank=True, help_text='User who cloned the tournament', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='cloned_tournaments', to=settings.AUTH_USER_MODEL)),
                ('restored_by', models.ForeignKey(blank=True, help_text='User who restored the tournament', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='restored_tournaments', to=settings.AUTH_USER_MODEL)),
                ('source_tournament', models.ForeignKey(blank=True, help_text='Source tournament if this is a clone', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='clones', to='tournaments.tournament')),
                ('tournament', models.OneToOneField(help_text='The tournament this archive record belongs to', on_delete=django.db.models.deletion.CASCADE, related_name='archive', to='tournaments.tournament')),
            ],
            options={
                'verbose_name': 'Tournament Archive',
                'verbose_name_plural': 'Tournament Archives',
                'ordering': ['-created_at'],
                'indexes': [models.Index(fields=['archive_type', 'is_archived'], name='tournaments_archive_be8f47_idx'), models.Index(fields=['source_tournament', 'clone_number'], name='tournaments_source__121f7f_idx'), models.Index(fields=['archived_at'], name='tournaments_archive_90fa9a_idx'), models.Index(fields=['cloned_at'], name='tournaments_cloned__5aae39_idx')],
            },
        ),
    ]
