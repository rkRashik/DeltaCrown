# Generated by Django 4.2.23 on 2025-08-30 20:17

import apps.tournaments.models
from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import django_ckeditor_5.fields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('teams', '0001_initial'),
        ('user_profile', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Bracket',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_locked', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='Match',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('round_no', models.PositiveIntegerField()),
                ('position', models.PositiveIntegerField(help_text='1-based index within round')),
                ('best_of', models.PositiveIntegerField(default=1)),
                ('score_a', models.PositiveIntegerField(default=0)),
                ('score_b', models.PositiveIntegerField(default=0)),
                ('start_at', models.DateTimeField(blank=True, null=True)),
                ('state', models.CharField(choices=[('SCHEDULED', 'Scheduled'), ('REPORTED', 'Reported'), ('VERIFIED', 'Verified')], default='SCHEDULED', max_length=10)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='Registration',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('payment_method', models.CharField(blank=True, choices=[('bkash', 'bKash'), ('nagad', 'Nagad'), ('rocket', 'Rocket'), ('bank', 'Bank Transfer')], max_length=10)),
                ('payment_reference', models.CharField(blank=True, max_length=120)),
                ('payment_status', models.CharField(choices=[('pending', 'Pending'), ('verified', 'Verified'), ('rejected', 'Rejected')], default='pending', max_length=10)),
                ('status', models.CharField(default='PENDING', max_length=12)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('payment_sender', models.CharField(blank=True, help_text='Payer account/phone', max_length=32)),
                ('payment_verified_at', models.DateTimeField(blank=True, null=True)),
                ('payment_note', models.TextField(blank=True)),
            ],
        ),
        migrations.CreateModel(
            name='Tournament',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, unique=True)),
                ('slug', models.SlugField(blank=True, max_length=220, unique=True)),
                ('game', models.CharField(blank=True, default='', max_length=32)),
                ('short_description', models.CharField(blank=True, max_length=280)),
                ('reg_open_at', models.DateTimeField()),
                ('reg_close_at', models.DateTimeField()),
                ('start_at', models.DateTimeField(blank=True, null=True)),
                ('end_at', models.DateTimeField()),
                ('slot_size', models.PositiveIntegerField()),
                ('entry_fee_bdt', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('prize_pool_bdt', models.DecimalField(decimal_places=2, default=0, max_digits=12)),
                ('prize_distribution_richtext', django_ckeditor_5.fields.CKEditor5Field(blank=True, verbose_name='Prize distribution')),
                ('banner', models.ImageField(blank=True, null=True, upload_to=apps.tournaments.models.tournament_banner_path)),
                ('rules_pdf', models.FileField(blank=True, null=True, upload_to=apps.tournaments.models.rules_pdf_path)),
                ('fb_stream', models.URLField(blank=True)),
                ('yt_stream', models.URLField(blank=True)),
                ('discord_link', models.URLField(blank=True)),
                ('status', models.CharField(choices=[('DRAFT', 'Draft'), ('PUBLISHED', 'Published'), ('RUNNING', 'Running'), ('COMPLETED', 'Completed')], default='DRAFT', max_length=12)),
                ('rules_richtext', django_ckeditor_5.fields.CKEditor5Field(blank=True, verbose_name='Rules')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='TournamentSettings',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('round_duration_mins', models.PositiveIntegerField(default=45)),
                ('round_gap_mins', models.PositiveIntegerField(default=10)),
                ('invite_only', models.BooleanField(default=False)),
                ('auto_check_in', models.BooleanField(default=False)),
                ('allow_substitutes', models.BooleanField(default=False)),
                ('custom_format_enabled', models.BooleanField(default=False)),
                ('automatic_scheduling_enabled', models.BooleanField(default=False)),
                ('bracket_visibility', models.CharField(choices=[('public', 'Public'), ('captains', 'Team Captains Only')], default='public', max_length=16)),
                ('region_lock', models.CharField(blank=True, help_text="Optional region code/name to restrict participation (e.g., 'Bangladesh' or 'ASIA').", max_length=64)),
                ('check_in_open_mins', models.PositiveIntegerField(default=60, help_text='Open before start (minutes)')),
                ('check_in_close_mins', models.PositiveIntegerField(default=15, help_text='Close before start (minutes)')),
                ('rules_pdf', models.FileField(blank=True, null=True, upload_to=apps.tournaments.models.rules_upload_path)),
                ('facebook_stream_url', models.URLField(blank=True)),
                ('youtube_stream_url', models.URLField(blank=True)),
                ('discord_link', models.URLField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('bkash_receive_number', models.CharField(blank=True, help_text='Organizer bKash number', max_length=20)),
                ('nagad_receive_number', models.CharField(blank=True, help_text='Organizer Nagad number', max_length=20)),
                ('rocket_receive_number', models.CharField(blank=True, help_text='Organizer Rocket number', max_length=20)),
                ('bank_instructions', models.TextField(blank=True, help_text='Bank account details or instructions (optional)')),
                ('tournament', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='settings', to='tournaments.tournament')),
            ],
        ),
        migrations.AddIndex(
            model_name='tournament',
            index=models.Index(fields=['status'], name='tournaments_status_c3a7bb_idx'),
        ),
        migrations.AddIndex(
            model_name='tournament',
            index=models.Index(fields=['start_at'], name='tournaments_start_a_52fcf2_idx'),
        ),
        migrations.AddField(
            model_name='registration',
            name='payment_verified_by',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='verified_registrations', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='registration',
            name='team',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='team_registrations', to='teams.team'),
        ),
        migrations.AddField(
            model_name='registration',
            name='tournament',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='registrations', to='tournaments.tournament'),
        ),
        migrations.AddField(
            model_name='registration',
            name='user',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='solo_registrations', to='user_profile.userprofile'),
        ),
        migrations.AddField(
            model_name='match',
            name='team_a',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='matches_as_team_a', to='teams.team'),
        ),
        migrations.AddField(
            model_name='match',
            name='team_b',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='matches_as_team_b', to='teams.team'),
        ),
        migrations.AddField(
            model_name='match',
            name='tournament',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='matches', to='tournaments.tournament'),
        ),
        migrations.AddField(
            model_name='match',
            name='user_a',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='matches_as_user_a', to='user_profile.userprofile'),
        ),
        migrations.AddField(
            model_name='match',
            name='user_b',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='matches_as_user_b', to='user_profile.userprofile'),
        ),
        migrations.AddField(
            model_name='match',
            name='winner_team',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='wins_as_team', to='teams.team'),
        ),
        migrations.AddField(
            model_name='match',
            name='winner_user',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='wins_as_user', to='user_profile.userprofile'),
        ),
        migrations.AddField(
            model_name='bracket',
            name='tournament',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='bracket', to='tournaments.tournament'),
        ),
        migrations.AddIndex(
            model_name='registration',
            index=models.Index(fields=['tournament', 'status'], name='tournaments_tournam_c14717_idx'),
        ),
        migrations.AddIndex(
            model_name='registration',
            index=models.Index(fields=['payment_status'], name='tournaments_payment_d8124a_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='registration',
            unique_together={('tournament', 'team'), ('tournament', 'user')},
        ),
        migrations.AddIndex(
            model_name='match',
            index=models.Index(fields=['tournament', 'round_no', 'position'], name='tournaments_tournam_9b1351_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='match',
            unique_together={('tournament', 'round_no', 'position')},
        ),
    ]
