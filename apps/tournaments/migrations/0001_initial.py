# Generated by Django 4.2.23 on 2025-09-04 16:07

import apps.tournaments.models.paths
from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('user_profile', '0001_initial'),
        ('teams', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Bracket',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_locked', models.BooleanField(default=False)),
                ('data', models.JSONField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ['tournament_id'],
            },
        ),
        migrations.CreateModel(
            name='Match',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('round_no', models.PositiveIntegerField()),
                ('position', models.PositiveIntegerField(help_text='1-based index within round')),
                ('best_of', models.PositiveIntegerField(default=1)),
                ('score_a', models.PositiveIntegerField(default=0)),
                ('score_b', models.PositiveIntegerField(default=0)),
                ('start_at', models.DateTimeField(blank=True, null=True)),
                ('state', models.CharField(choices=[('SCHEDULED', 'Scheduled'), ('REPORTED', 'Reported'), ('VERIFIED', 'Verified')], default='SCHEDULED', max_length=10)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='MatchComment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('body', models.TextField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'ordering': ['created_at'],
            },
        ),
        migrations.CreateModel(
            name='MatchDispute',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_open', models.BooleanField(default=True)),
                ('status', models.CharField(choices=[('open', 'Open'), ('resolved', 'Resolved'), ('rejected', 'Rejected')], default='open', max_length=16)),
                ('reason', models.TextField(blank=True, default='')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('resolved_at', models.DateTimeField(blank=True, null=True)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='MatchEvent',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.CharField(max_length=32)),
                ('payload', models.JSONField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'ordering': ['created_at'],
            },
        ),
        migrations.CreateModel(
            name='PaymentVerification',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('method', models.CharField(choices=[('bkash', 'bKash'), ('nagad', 'Nagad'), ('rocket', 'Rocket'), ('bank', 'Bank Transfer'), ('other', 'Other')], default='bkash', max_length=16)),
                ('payer_account_number', models.CharField(blank=True, help_text='Your bKash/Nagad/Rocket account number (payer)', max_length=32)),
                ('transaction_id', models.CharField(blank=True, help_text='Transaction ID from bKash/Nagad/Rocket', max_length=64)),
                ('amount_bdt', models.PositiveIntegerField(blank=True, null=True)),
                ('note', models.CharField(blank=True, max_length=255)),
                ('proof_image', models.ImageField(blank=True, null=True, upload_to='payments/proofs/')),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('verified', 'Verified'), ('rejected', 'Rejected')], default='pending', max_length=16)),
                ('verified_at', models.DateTimeField(blank=True, null=True)),
                ('reject_reason', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='Registration',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('payment_method', models.CharField(blank=True, default='', max_length=32)),
                ('payment_sender', models.CharField(blank=True, default='', max_length=64)),
                ('payment_reference', models.CharField(blank=True, default='', max_length=64)),
                ('payment_status', models.CharField(choices=[('pending', 'Pending'), ('verified', 'Verified'), ('rejected', 'Rejected')], default='pending', max_length=16)),
                ('status', models.CharField(choices=[('PENDING', 'Pending'), ('CONFIRMED', 'Confirmed'), ('CANCELLED', 'Cancelled')], default='PENDING', max_length=16)),
                ('payment_verified_at', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Tournament',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('slug', models.SlugField(max_length=255, unique=True)),
                ('short_description', models.CharField(blank=True, default='', max_length=255)),
                ('game', models.CharField(choices=[('valorant', 'Valorant'), ('efootball', 'eFootball Mobile')], max_length=20)),
                ('status', models.CharField(choices=[('DRAFT', 'Draft'), ('PUBLISHED', 'Published'), ('RUNNING', 'Running'), ('COMPLETED', 'Completed')], default='DRAFT', max_length=16)),
                ('banner', models.ImageField(blank=True, null=True, upload_to=apps.tournaments.models.paths.tournament_banner_path)),
                ('slot_size', models.PositiveIntegerField(blank=True, null=True)),
                ('reg_open_at', models.DateTimeField(blank=True, null=True)),
                ('reg_close_at', models.DateTimeField(blank=True, null=True)),
                ('start_at', models.DateTimeField(blank=True, null=True)),
                ('end_at', models.DateTimeField(blank=True, null=True)),
                ('entry_fee_bdt', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('prize_pool_bdt', models.DecimalField(blank=True, decimal_places=2, max_digits=12, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='TournamentSettings',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('tournament_type', models.CharField(choices=[('SE', 'Single Elimination'), ('DE', 'Double Elimination'), ('RR', 'Round Robin'), ('SW', 'Swiss'), ('CU', 'Custom Format')], default='SE', max_length=2)),
                ('description', models.TextField(blank=True)),
                ('start_at', models.DateTimeField(blank=True, null=True)),
                ('end_at', models.DateTimeField(blank=True, null=True)),
                ('reg_open_at', models.DateTimeField(blank=True, null=True)),
                ('reg_close_at', models.DateTimeField(blank=True, null=True)),
                ('min_team_size', models.PositiveSmallIntegerField(default=1, validators=[django.core.validators.MinValueValidator(1)])),
                ('max_team_size', models.PositiveSmallIntegerField(default=1, validators=[django.core.validators.MinValueValidator(1)])),
                ('entry_fee_bdt', models.PositiveIntegerField(blank=True, null=True)),
                ('prize_pool_bdt', models.PositiveIntegerField(blank=True, null=True)),
                ('prize_distribution_text', models.TextField(blank=True)),
                ('prize_type', models.CharField(choices=[('cash', 'Cash Prize'), ('gift_cards', 'Gift Cards'), ('gear', 'Gaming Gear'), ('sponsored', 'Sponsored Prizes')], default='cash', max_length=16)),
                ('banner', models.ImageField(blank=True, null=True, upload_to='tournaments/banners/')),
                ('rules_pdf', models.FileField(blank=True, null=True, upload_to='tournaments/rules/')),
                ('stream_facebook_url', models.URLField(blank=True)),
                ('stream_youtube_url', models.URLField(blank=True)),
                ('discord_url', models.URLField(blank=True)),
                ('invite_only', models.BooleanField(default=False)),
                ('auto_check_in', models.BooleanField(default=False)),
                ('bracket_visibility', models.CharField(choices=[('public', 'Public'), ('captains', 'Team Captains Only')], default='public', max_length=16)),
                ('auto_schedule', models.BooleanField(default=False)),
                ('custom_format_json', models.JSONField(blank=True, null=True)),
                ('payment_gateway_enabled', models.BooleanField(default=False, help_text='Leave OFF for manual verification (bKash/Nagad/Rocket).')),
                ('region_lock', models.BooleanField(default=False)),
                ('check_in_open_mins', models.PositiveIntegerField(blank=True, help_text='Minutes before start when check-in opens (e.g., 60).', null=True)),
                ('check_in_close_mins', models.PositiveIntegerField(blank=True, help_text='Minutes before start when check-in closes (e.g., 15).', null=True)),
                ('bkash_receive_type', models.CharField(blank=True, choices=[('personal', 'Personal'), ('merchant', 'Merchant'), ('agent', 'Agent')], default='personal', max_length=16)),
                ('bkash_receive_number', models.CharField(blank=True, help_text='Organizer’s bKash account number to receive fees.', max_length=32)),
                ('nagad_receive_type', models.CharField(blank=True, choices=[('personal', 'Personal'), ('merchant', 'Merchant'), ('agent', 'Agent')], default='personal', max_length=16)),
                ('nagad_receive_number', models.CharField(blank=True, help_text='Organizer’s Nagad account number to receive fees.', max_length=32)),
                ('rocket_receive_type', models.CharField(blank=True, choices=[('personal', 'Personal'), ('merchant', 'Merchant'), ('agent', 'Agent')], default='agent', max_length=16)),
                ('rocket_receive_number', models.CharField(blank=True, help_text='Organizer’s Rocket account number to receive fees.', max_length=32)),
                ('bank_instructions', models.TextField(blank=True, help_text='Optional bank transfer instructions (bank name, branch, account title & number).')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('tournament', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='settings', to='tournaments.tournament')),
            ],
            options={
                'verbose_name': 'Tournament Settings',
                'verbose_name_plural': 'Tournament Settings',
            },
        ),
        migrations.CreateModel(
            name='TournamentRegistrationPolicy',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('mode', models.CharField(choices=[('solo', 'Solo (1v1)'), ('team', 'Team'), ('duo', 'Duo (2v2)')], default='team', max_length=8)),
                ('team_size_min', models.PositiveSmallIntegerField(default=1)),
                ('team_size_max', models.PositiveSmallIntegerField(default=5)),
                ('tournament', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='registration_policy', to='tournaments.tournament')),
            ],
        ),
        migrations.AddIndex(
            model_name='tournament',
            index=models.Index(fields=['slug'], name='tournaments_slug_2e3c0a_idx'),
        ),
        migrations.AddIndex(
            model_name='tournament',
            index=models.Index(fields=['status'], name='tournaments_status_c3a7bb_idx'),
        ),
        migrations.AddIndex(
            model_name='tournament',
            index=models.Index(fields=['game'], name='tournaments_game_28be85_idx'),
        ),
        migrations.AddField(
            model_name='registration',
            name='payment_verified_by',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='registration',
            name='team',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='team_registrations', to='teams.team'),
        ),
        migrations.AddField(
            model_name='registration',
            name='tournament',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='registrations', to='tournaments.tournament'),
        ),
        migrations.AddField(
            model_name='registration',
            name='user',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='solo_registrations', to='user_profile.userprofile'),
        ),
        migrations.AddField(
            model_name='paymentverification',
            name='registration',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='payment_verification', to='tournaments.registration'),
        ),
        migrations.AddField(
            model_name='paymentverification',
            name='verified_by',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='matchevent',
            name='match',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='events', to='tournaments.match'),
        ),
        migrations.AddField(
            model_name='matchdispute',
            name='match',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='disputes', to='tournaments.match'),
        ),
        migrations.AddField(
            model_name='matchdispute',
            name='opened_by',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='disputes_opened', to='user_profile.userprofile'),
        ),
        migrations.AddField(
            model_name='matchdispute',
            name='resolver',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='disputes_resolved', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='matchcomment',
            name='author',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='user_profile.userprofile'),
        ),
        migrations.AddField(
            model_name='matchcomment',
            name='match',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='comments', to='tournaments.match'),
        ),
        migrations.AddField(
            model_name='match',
            name='team_a',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='matches_as_team_a', to='teams.team'),
        ),
        migrations.AddField(
            model_name='match',
            name='team_b',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='matches_as_team_b', to='teams.team'),
        ),
        migrations.AddField(
            model_name='match',
            name='tournament',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='matches', to='tournaments.tournament'),
        ),
        migrations.AddField(
            model_name='match',
            name='user_a',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='matches_as_user_a', to='user_profile.userprofile'),
        ),
        migrations.AddField(
            model_name='match',
            name='user_b',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='matches_as_user_b', to='user_profile.userprofile'),
        ),
        migrations.AddField(
            model_name='match',
            name='winner_team',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='wins_as_team', to='teams.team'),
        ),
        migrations.AddField(
            model_name='match',
            name='winner_user',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='wins_as_user', to='user_profile.userprofile'),
        ),
        migrations.AddField(
            model_name='bracket',
            name='tournament',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='bracket', to='tournaments.tournament'),
        ),
        migrations.AddIndex(
            model_name='registration',
            index=models.Index(fields=['tournament', 'status'], name='tournaments_tournam_c14717_idx'),
        ),
        migrations.AddIndex(
            model_name='registration',
            index=models.Index(fields=['payment_status'], name='tournaments_payment_d8124a_idx'),
        ),
        migrations.AddIndex(
            model_name='matchevent',
            index=models.Index(fields=['match', 'created_at'], name='tournaments_match_i_e52fb5_idx'),
        ),
        migrations.AddIndex(
            model_name='matchevent',
            index=models.Index(fields=['type'], name='tournaments_type_360dcc_idx'),
        ),
        migrations.AddIndex(
            model_name='matchdispute',
            index=models.Index(fields=['match', 'status'], name='tournaments_match_i_37a719_idx'),
        ),
        migrations.AddIndex(
            model_name='matchdispute',
            index=models.Index(fields=['match', 'is_open'], name='tournaments_match_i_46a79e_idx'),
        ),
        migrations.AddIndex(
            model_name='matchdispute',
            index=models.Index(fields=['created_at'], name='tournaments_created_0d3438_idx'),
        ),
        migrations.AddIndex(
            model_name='matchcomment',
            index=models.Index(fields=['match', 'created_at'], name='tournaments_match_i_0db753_idx'),
        ),
        migrations.AddIndex(
            model_name='match',
            index=models.Index(fields=['tournament', 'round_no', 'position'], name='tournaments_tournam_9b1351_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='match',
            unique_together={('tournament', 'round_no', 'position')},
        ),
    ]
