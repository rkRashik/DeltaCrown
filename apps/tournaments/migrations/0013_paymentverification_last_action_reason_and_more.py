# Generated by Django 4.2.23 on 2025-09-17 06:30

import apps.tournaments.models.evidence
from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


def _column_exists(schema_editor, table_name: str, column_name: str) -> bool:
    with schema_editor.connection.cursor() as cursor:
        description = schema_editor.connection.introspection.get_table_description(cursor, table_name)
    for col in description:
        name = getattr(col, "name", None)
        if name is None:
            name = col[0]
        if name == column_name:
            return True
    return False


def _table_exists(schema_editor, table_name: str) -> bool:
    with schema_editor.connection.cursor() as cursor:
        tables = schema_editor.connection.introspection.table_names(cursor)
    return table_name in tables


def _add_last_action_reason(apps, schema_editor):
    table = "tournaments_paymentverification"
    column = "last_action_reason"
    if _column_exists(schema_editor, table, column):
        return
    model = apps.get_model("tournaments", "PaymentVerification")
    field = models.CharField(max_length=200, blank=True, default="")
    field.set_attributes_from_name(column)
    schema_editor.add_field(model, field)
    if schema_editor.connection.vendor == "postgresql":
        schema_editor.execute(
            f"ALTER TABLE {schema_editor.quote_name(table)} "
            f"ALTER COLUMN {schema_editor.quote_name(column)} DROP DEFAULT;"
        )


def _drop_last_action_reason(apps, schema_editor):
    table = "tournaments_paymentverification"
    column = "last_action_reason"
    if not _column_exists(schema_editor, table, column):
        return
    model = apps.get_model("tournaments", "PaymentVerification")
    field = models.CharField(max_length=200, blank=True)
    field.set_attributes_from_name(column)
    schema_editor.remove_field(model, field)


def _create_matchdisputeevidence(apps, schema_editor):
    table = "tournaments_matchdisputeevidence"
    if _table_exists(schema_editor, table):
        return

    class _TempMatchDisputeEvidence(models.Model):
        file = models.FileField(upload_to=apps.tournaments.models.evidence.evidence_upload_path)
        content_type = models.CharField(max_length=64, blank=True, default="")
        size = models.PositiveIntegerField(default=0)
        created_at = models.DateTimeField(auto_now_add=True)
        dispute = models.ForeignKey(
            "tournaments.MatchDispute",
            on_delete=django.db.models.deletion.CASCADE,
            related_name="evidence",
        )
        uploaded_by = models.ForeignKey(
            settings.AUTH_USER_MODEL,
            on_delete=django.db.models.deletion.SET_NULL,
            null=True,
            blank=True,
            related_name="uploaded_evidence",
        )

        class Meta:
            app_label = "tournaments"
            db_table = table
            ordering = ["-created_at"]

    schema_editor.create_model(_TempMatchDisputeEvidence)


def _drop_matchdisputeevidence(apps, schema_editor):
    table = "tournaments_matchdisputeevidence"
    if not _table_exists(schema_editor, table):
        return

    class _TempMatchDisputeEvidence(models.Model):
        file = models.FileField(upload_to=apps.tournaments.models.evidence.evidence_upload_path)
        content_type = models.CharField(max_length=64, blank=True, default="")
        size = models.PositiveIntegerField(default=0)
        created_at = models.DateTimeField(auto_now_add=True)
        dispute = models.ForeignKey(
            "tournaments.MatchDispute",
            on_delete=django.db.models.deletion.CASCADE,
            related_name="evidence",
        )
        uploaded_by = models.ForeignKey(
            settings.AUTH_USER_MODEL,
            on_delete=django.db.models.deletion.SET_NULL,
            null=True,
            blank=True,
            related_name="uploaded_evidence",
        )

        class Meta:
            app_label = "tournaments"
            db_table = table
            ordering = ["-created_at"]

    schema_editor.delete_model(_TempMatchDisputeEvidence)


class Migration(migrations.Migration):

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ("tournaments", "0012_alter_matchattendance_id"),
    ]

    operations = [
        migrations.SeparateDatabaseAndState(
            state_operations=[
                migrations.AddField(
                    model_name="paymentverification",
                    name="last_action_reason",
                    field=models.CharField(blank=True, max_length=200),
                ),
            ],
            database_operations=[
                migrations.RunPython(_add_last_action_reason, _drop_last_action_reason),
            ],
        ),
        migrations.SeparateDatabaseAndState(
            state_operations=[
                migrations.CreateModel(
                    name="MatchDisputeEvidence",
                    fields=[
                        ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                        ("file", models.FileField(upload_to=apps.tournaments.models.evidence.evidence_upload_path)),
                        ("content_type", models.CharField(blank=True, default="", max_length=64)),
                        ("size", models.PositiveIntegerField(default=0)),
                        ("created_at", models.DateTimeField(auto_now_add=True)),
                        ("dispute", models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name="evidence", to="tournaments.matchdispute")),
                        ("uploaded_by", models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name="uploaded_evidence", to=settings.AUTH_USER_MODEL)),
                    ],
                    options={
                        "ordering": ["-created_at"],
                    },
                ),
            ],
            database_operations=[
                migrations.RunPython(_create_matchdisputeevidence, _drop_matchdisputeevidence),
            ],
        ),
    ]
