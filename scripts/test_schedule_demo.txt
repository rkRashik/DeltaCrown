# Test TournamentSchedule in Django shell
from datetime import timedelta
from django.utils import timezone
from apps.tournaments.models import Tournament, TournamentSchedule

print("=" * 60)
print("🎯 TournamentSchedule Pilot Demonstration")
print("=" * 60)
print()

# Create test tournament
print("1️⃣  Creating test tournament...")
tournament = Tournament.objects.create(
    name="Test Tournament - Schedule Demo",
    slug="test-schedule-demo",
    game="valorant",
    status="DRAFT"
)
print(f"   ✅ Created: {tournament.name}")
print()

# Create schedule
print("2️⃣  Creating schedule...")
now = timezone.now()
schedule = TournamentSchedule.objects.create(
    tournament=tournament,
    reg_open_at=now + timedelta(days=1),
    reg_close_at=now + timedelta(days=7),
    start_at=now + timedelta(days=8),
    end_at=now + timedelta(days=9),
    check_in_open_mins=60,
    check_in_close_mins=10,
)
print(f"   ✅ Schedule created")
print(f"   📅 Registration: {schedule.get_registration_window_display()}")
print(f"   📅 Tournament: {schedule.get_tournament_window_display()}")
print()

# Access via relationship
print("3️⃣  Accessing schedule via tournament...")
retrieved_schedule = tournament.schedule
print(f"   ✅ tournament.schedule works!")
print(f"   🔗 Schedule ID: {retrieved_schedule.id}")
print()

# Test computed properties
print("4️⃣  Testing computed properties...")
print(f"   📊 Registration Status: {schedule.registration_status}")
print(f"   📊 Tournament Status: {schedule.tournament_status}")
print(f"   📊 Check-in Window: {schedule.check_in_window_text}")
print(f"   🔴 Registration Open? {schedule.is_registration_open}")
print(f"   🔴 Tournament Live? {schedule.is_tournament_live}")
print(f"   🔴 Check-in Open? {schedule.is_check_in_open}")
print()

# Cleanup
print("5️⃣  Cleaning up test data...")
tournament.delete()
print("   ✅ Test tournament deleted")
print()

print("=" * 60)
print("🎉 Demonstration Complete!")
print("=" * 60)
