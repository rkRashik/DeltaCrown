# Dynamic Tournament Registration Form - Developer Instruction Guide

## Overview
This guide details the implementation of a dynamic tournament registration form that supports multiple games (solo and team-based), auto-fills user/team data, and adapts form fields dynamically based on the game and tournament configurations.

---

## Core Functionality

- Auto-fill data from user profile.
- For team games:
  - If the user is a captain of a registered team, auto-fill all team data including players.
  - If not in a team or not a captain, require manual data entry.
- For solo games:
  - Auto-fill from user profile or manual completion if data missing.
- After registration details, lead to a common payment step.
- Enforce game-specific player counts, roles, and credential fields dynamically.

---

## Detailed Breakdown of Game-Specific Dynamic Fields

The following table and explanations enumerate the fields which change dynamically for each supported game during registration:

| Game               | Team/Solo Type | Team Size (Starters + Subs) | Dynamic Player Fields                                     | Role/Position Selection                 | Special Notes                              |
|--------------------|----------------|-----------------------------|-----------------------------------------------------------|----------------------------------------|--------------------------------------------|
| Valorant           | Team           | 5 + 2                       | Player Display Name, Riot ID (UserName#TAG), Discord ID   | Duelist, Controller, Initiator, Sentinel, IGL | Validate Riot ID format                     |
| Counter Strike 2   | Team           | 5 + 2                       | Player Display Name, Steam ID, Discord ID (optional)      | IGL, Entry Fragger, AWPer, Lurker, Support | Steam ID format validation                  |
| Dota 2             | Team           | 5 + 2                       | Player Display Name, Steam ID, Dota2 Friend ID, Discord ID (optional) | Hard Carry (Pos 1), Midlaner (Pos 2), Offlaner (Pos 3), Soft Support (Pos 4), Hard Support (Pos 5) | Numeric validation for Dota2 Friend ID     |
| Mobile Legends (MLBB) | Team        | 5 + 2                       | Player Display Name, MLBB User ID, In-Game Name, Discord ID (optional) | Gold Laner, EXP Laner, Mid Laner, Jungler, Roamer | MLBB User ID numeric validation             |
| PUBG (PC/Mobile)   | Team           | 4 + 2                       | Player Display Name, PUBG ID, PUBG Character Name, Discord ID (optional) | IGL/Shot Caller, Assaulter/Fragger, Support, Sniper/Scout | PUBG ID alphanumeric validation            |
| Free Fire          | Team           | 4 + 2                       | Player Display Name, Free Fire UID, In-Game Name, Discord ID (optional) | Rusher, Flanker, Support, Shot Caller (IGL) | Numeric validation for Free Fire UID       |
| eFootball          | Solo/Team      | Solo: 1; Team: 2 + 1        | Player Display Name, eFootball User ID, eFootball Username | None (individual skill-focused)        | Numeric validation for eFootball User ID   |
| FC 26 (EA Sports FC) | Solo/Team    | Solo: 1; Team: 1 + 1        | Player Display Name, EA ID / Origin ID, FC26 Username, Platform (PC/PS/Xbox) | None                                    | Platform selection dropdown required       |

---

## Field Descriptions Per Game

### Valorant (Team)

- **Player Display Name:** Auto-filled from user/team profile
- **Riot ID:** Required, format `UserName#TAG`, validated client-side and server-side
- **Discord ID:** Required for team coordination, format validated
- **Player Role:** Dropdown with values Duelist, Controller, Initiator, Sentinel, IGL

### Counter-Strike 2 (Team)

- **Player Display Name:** Auto-filled
- **Steam ID:** Required, format like `STEAM_0:X:XXXXXX` or Steam64, validated format
- **Discord ID:** Optional

- **Player Role:** Dropdown: IGL, Entry Fragger, AWPer, Lurker, Support

### Dota 2 (Team)

- **Player Display Name:** Auto-filled
- **Steam ID:** Required
- **Dota 2 Friend ID:** Numeric, required for player identification, validated
- **Discord ID:** Optional
- **Player Position:** Dropdown positions 1-5 as per roles

### Mobile Legends: Bang Bang (Team)

- **Player Display Name:** Auto-filled
- **MLBB User ID:** Numeric ID required
- **In-Game Name:** Required display name in MLBB
- **Discord ID:** Optional
- **Player Role:** Dropdown: Gold Laner, EXP Laner, Mid Laner, Jungler, Roamer

### PUBG (Team)

- **Player Display Name:** Auto-filled
- **PUBG ID:** Alphanumeric required
- **Character Name:** In-game character name required
- **Discord ID:** Optional
- **Player Role:** Dropdown: IGL/Shot Caller, Assaulter/Fragger, Support, Sniper/Scout

### Free Fire (Team)

- **Player Display Name:** Auto-filled
- **Free Fire UID:** Numeric UID required
- **In-Game Name:** Required
- **Discord ID:** Optional
- **Player Role:** Dropdown: Rusher, Flanker, Support, Shot Caller (IGL)

### eFootball (Solo/Team)

- **Player Display Name:** Solo or Team players
- **eFootball User ID:** Numeric ID required
- **eFootball Username:** Required user name
- No role or position selection (individual skill-focused)

### FC 26 (Solo/Team)

- **Player Display Name:** Player / sub/coach
- **EA/Origin ID:** Required alphanumeric
- **FC 26 Username:** Required
- **Platform:** Dropdown for PC, PlayStation, Xbox

---

## Auto-fill Behavior Logic

- On form load, check if user profile has saved data:
  - Fill personal details: name, contact, email
  - Fill in-game IDs per game and player
- For team games, check if user is in a team for that game and tournament:
  - If yes and user is captain, auto-fill all player roster data as per team profile
  - If user is not captain, show approval request prompt instead of form
  - If no team found, present blank form with dynamically generated fields based on game config
- Allow manual editing of any missing or incorrect fields after auto-fill

---

## Validation Requirements

- Mandatory fields must be filled.
- Format-specific validations on IDs, emails, phone numbers.
- Team size limits enforced during form generation.
- Player roles must be assigned from specified dropdown options.
- Payment reference mandatory if applicable.

---

## Payment Step (Unified)

- Payment page follows successful registration form submission.
- Payment options: bKash, Nagad, Rocket, Bank Transfer.
- Collect payer details and transaction reference.
- Update registration record to pending payment verification state.

---

## Backend API Suggestions

- Endpoints to fetch:
  - Tournament configuration (game, player limits, fields)
  - User profile and game IDs
  - Team details and team roster
- Endpoints to:
  - Validate dynamic form data
  - Submit registration data and payment info
  - Manage approval workflows for team registrations

---

## Developer Notes

- Ensure the registration form is modular to support easy addition of new games and fields.
- Use context-aware UI components to dynamically generate and validate fields.
- Implement role-based access for team captain submission and member approval flow.
- Use caching and API calls efficiently for auto-fill to minimize latency.
- Security practices including authentication checks, CSRF protection, input sanitization mandatory.

---

This detailed breakdown should enable developers to build a flexible, dynamic tournament registration system tailored to various esports games with proper auto-fill and validation mechanics.

For assistance with coding samples or architecture diagrams, please request further details.

---
